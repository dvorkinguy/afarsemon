{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, boolean } from \"drizzle-orm/pg-core\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"emailVerified\"),\n  image: text(\"image\"),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expiresAt\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n  ipAddress: text(\"ipAddress\"),\n  userAgent: text(\"userAgent\"),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"accountId\").notNull(),\n  providerId: text(\"providerId\").notNull(),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"accessToken\"),\n  refreshToken: text(\"refreshToken\"),\n  idToken: text(\"idToken\"),\n  accessTokenExpiresAt: timestamp(\"accessTokenExpiresAt\"),\n  refreshTokenExpiresAt: timestamp(\"refreshTokenExpiresAt\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n});\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expiresAt\").notNull(),\n  createdAt: timestamp(\"createdAt\").defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").defaultNow(),\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/packages/env/src/index.ts"],"sourcesContent":["import { z } from \"zod\";\n\n// Base environment schema with all possible variables\nconst baseEnvSchema = z.object({\n  // Application URLs\n  NEXT_PUBLIC_APP_URL: z.string().url().optional(),\n  NEXT_PUBLIC_WWW_URL: z.string().url().optional(),\n  NEXT_PUBLIC_DASHBOARD_URL: z.string().url().optional(),\n\n  // Database\n  POSTGRES_URL: z.string().min(1, \"Database URL is required\"),\n  DATABASE_URL: z.string().min(1).optional(), // Fallback for some tools\n\n  // Supabase\n  NEXT_PUBLIC_SUPABASE_URL: z.string().url(\"Invalid Supabase URL\"),\n  NEXT_PUBLIC_SUPABASE_ANON_KEY: z.string().min(1, \"Supabase anon key is required\"),\n  NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY: z.string().min(1).optional(),\n  SUPABASE_SERVICE_ROLE_KEY: z.string().min(1, \"Supabase service role key is required\"),\n\n  // Better Auth\n  BETTER_AUTH_SECRET: z.string().min(32, \"Better Auth secret must be at least 32 characters\"),\n  BETTER_AUTH_URL: z.string().url().optional(),\n  NEXT_PUBLIC_BETTER_AUTH_URL: z.string().url().optional(),\n\n  // Google OAuth\n  GOOGLE_CLIENT_ID: z.string().min(1, \"Google Client ID is required for authentication\"),\n  GOOGLE_CLIENT_SECRET: z.string().min(1, \"Google Client Secret is required for authentication\"),\n\n  // AI Services\n  OPENAI_API_KEY: z.string().min(1).optional(),\n  OPENAI_MODEL: z.string().default(\"gpt-4\").optional(),\n  GOOGLE_GENERATIVE_AI_API_KEY: z.string().min(1).optional(),\n  GEMINI_API_KEY: z.string().min(1).optional(),\n  GEMINI_MODEL: z.string().default(\"gemini-2.5-flash\").optional(),\n\n  // Analytics (Optional)\n  GOOGLE_ANALYTICS_ID: z.string().optional(),\n  FACEBOOK_PIXEL_ID: z.string().optional(),\n\n  // Email (Optional)\n  RESEND_API_KEY: z.string().optional(),\n\n  // Webhook Secrets (Optional)\n  WEBHOOK_SECRET_N8N: z.string().optional(),\n  WEBHOOK_SECRET_MAKE: z.string().optional(),\n  WEBHOOK_SECRET_ZAPIER: z.string().optional(),\n});\n\n// Server-side environment (has access to all variables)\nconst serverEnvSchema = baseEnvSchema;\n\n// Client-side environment (only NEXT_PUBLIC_ variables)\nconst clientEnvSchema = z.object({\n  NEXT_PUBLIC_APP_URL: baseEnvSchema.shape.NEXT_PUBLIC_APP_URL,\n  NEXT_PUBLIC_WWW_URL: baseEnvSchema.shape.NEXT_PUBLIC_WWW_URL,\n  NEXT_PUBLIC_DASHBOARD_URL: baseEnvSchema.shape.NEXT_PUBLIC_DASHBOARD_URL,\n  NEXT_PUBLIC_SUPABASE_URL: baseEnvSchema.shape.NEXT_PUBLIC_SUPABASE_URL,\n  NEXT_PUBLIC_SUPABASE_ANON_KEY: baseEnvSchema.shape.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n  NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY: baseEnvSchema.shape.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY,\n  NEXT_PUBLIC_BETTER_AUTH_URL: baseEnvSchema.shape.NEXT_PUBLIC_BETTER_AUTH_URL,\n});\n\n// Environment validation functions\nfunction validateServerEnv(): z.infer<typeof serverEnvSchema> {\n  try {\n    return serverEnvSchema.parse(process.env);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const issues = error.issues.map(issue => \n        `${issue.path.join('.')}: ${issue.message}`\n      ).join('\\n');\n      \n      throw new Error(\n        `Environment validation failed:\\n${issues}\\n\\n` +\n        `Please check your .env.local file in the root directory.`\n      );\n    }\n    throw error;\n  }\n}\n\nfunction validateClientEnv(): z.infer<typeof clientEnvSchema> {\n  const clientEnvVars = Object.keys(clientEnvSchema.shape).reduce((acc, key) => {\n    acc[key] = process.env[key];\n    return acc;\n  }, {} as Record<string, string | undefined>);\n\n  try {\n    return clientEnvSchema.parse(clientEnvVars);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const issues = error.issues.map(issue => \n        `${issue.path.join('.')}: ${issue.message}`\n      ).join('\\n');\n      \n      throw new Error(\n        `Client environment validation failed:\\n${issues}\\n\\n` +\n        `Please check your NEXT_PUBLIC_ variables in .env.local`\n      );\n    }\n    throw error;\n  }\n}\n\n// Create validated environment objects (lazy-loaded to avoid import-time errors)\nlet serverEnv: z.infer<typeof serverEnvSchema> | undefined;\nlet clientEnv: z.infer<typeof clientEnvSchema> | undefined;\n\n// Export types\nexport type ServerEnv = z.infer<typeof serverEnvSchema>;\nexport type ClientEnv = z.infer<typeof clientEnvSchema>;\n\n// Export validated environment objects with safe access\nexport const getServerEnv = (): z.infer<typeof serverEnvSchema> => {\n  if (typeof window !== 'undefined') {\n    throw new Error('Server environment is not available on client side');\n  }\n  if (!serverEnv) {\n    // Lazy initialization on first access\n    try {\n      serverEnv = validateServerEnv();\n    } catch (error) {\n      console.error('‚ùå Server environment validation failed:', error);\n      throw error;\n    }\n  }\n  return serverEnv;\n};\n\nexport const getClientEnv = (): z.infer<typeof clientEnvSchema> => {\n  if (!clientEnv) {\n    // Lazy initialization on first access\n    try {\n      if (typeof window === 'undefined') {\n        // Server-side: create client env from server env\n        const clientEnvVars = Object.keys(clientEnvSchema.shape).reduce((acc, key) => {\n          acc[key] = process.env[key];\n          return acc;\n        }, {} as Record<string, string | undefined>);\n        clientEnv = clientEnvSchema.parse(clientEnvVars);\n      } else {\n        // Client-side: validate client env\n        clientEnv = validateClientEnv();\n      }\n    } catch (error) {\n      console.error('‚ùå Client environment validation failed:', error);\n      throw error;\n    }\n  }\n  return clientEnv;\n};\n\n// For backwards compatibility and direct access\nexport { serverEnv, clientEnv };\n\n// Export validation functions for manual use\nexport { validateServerEnv, validateClientEnv };\n\n// Export schemas for extending\nexport { serverEnvSchema, clientEnvSchema, baseEnvSchema };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 356, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/db.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"./schema\";\nimport { getServerEnv } from \"@afarsemon/env\";\n\nconst serverEnv = getServerEnv();\nconst client = postgres(serverEnv.POSTGRES_URL);\nexport const db = drizzle(client, { schema });\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,YAAY,CAAA,GAAA,iIAAA,CAAA,eAAY,AAAD;AAC7B,MAAM,SAAS,CAAA,GAAA,+LAAA,CAAA,UAAQ,AAAD,EAAE,UAAU,YAAY;AACvC,MAAM,KAAK,CAAA,GAAA,kWAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 376, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/auth.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\"\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\"\nimport { nextCookies } from \"better-auth/next-js\"\nimport { db } from \"./db\"\nimport * as schema from \"./schema\"\nimport { getServerEnv } from \"@afarsemon/env\"\n\nconst serverEnv = getServerEnv();\n\nexport const auth = betterAuth({\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n    schema: {\n      ...schema,\n    },\n  }),\n  baseURL: serverEnv.BETTER_AUTH_URL || serverEnv.NEXT_PUBLIC_APP_URL || \"http://localhost:3000\",\n  socialProviders: {\n    google: {\n      clientId: serverEnv.GOOGLE_CLIENT_ID,\n      clientSecret: serverEnv.GOOGLE_CLIENT_SECRET,\n      // Remove explicit redirectURI to let Better Auth generate it automatically\n      // This ensures it matches the baseURL + /api/auth/callback/google\n    },\n  },\n  emailAndPassword: {\n    enabled: true,\n    requireEmailVerification: false, // Disabled for development - no email service configured\n    minPasswordLength: 6, // Reduced for easier testing\n    maxPasswordLength: 128,\n    autoSignIn: true, // Sign in user automatically after successful registration\n    sendResetPassword: async ({ user, url }) => {\n      // TODO: Implement email sending for password reset\n      console.log(`Password reset requested for ${user.email}. Reset URL: ${url}`);\n      // In production, replace with actual email service\n    },\n    resetPasswordTokenExpiresIn: 3600, // 1 hour\n  },\n  emailVerification: {\n    sendVerificationEmail: async ({ user, url }) => {\n      // TODO: Implement email sending for verification\n      console.log(`Email verification requested for ${user.email}. Verification URL: ${url}`);\n      // In production, replace with actual email service like Resend, SendGrid, etc.\n    },\n    sendOnSignUp: true, // Automatically send verification email on sign up\n    autoSignInAfterVerification: true, // Sign in user after successful verification\n    expiresIn: 3600, // 1 hour\n  },\n  advanced: {\n    // Security configurations\n    useSecureCookies: process.env.NODE_ENV === \"production\",\n    disableCSRFCheck: false, // Keep CSRF protection enabled\n    cookiePrefix: process.env.NODE_ENV === \"production\" ? \"__Host-\" : \"\", // Use __Host- prefix only in production\n    defaultCookieAttributes: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"lax\", // CSRF protection\n    },\n    // IP tracking for security\n    ipAddress: {\n      disableIpTracking: false,\n    },\n  },\n  session: {\n    expiresIn: 60 * 60 * 24 * 7, // 7 days\n    updateAge: 60 * 60 * 24, // Update session every 24 hours\n    cookieCache: {\n      enabled: true,\n      maxAge: 60 * 5 // Cache for 5 minutes\n    }\n  },\n  trustedOrigins: serverEnv.NEXT_PUBLIC_APP_URL ? [serverEnv.NEXT_PUBLIC_APP_URL] : [\"http://localhost:3000\"],\n  plugins: [\n    nextCookies(), // Must be the last plugin for Next.js cookie handling\n  ],\n})"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA,MAAM,YAAY,CAAA,GAAA,iIAAA,CAAA,eAAY,AAAD;AAEtB,MAAM,OAAO,CAAA,GAAA,4VAAA,CAAA,aAAU,AAAD,EAAE;IAC7B,UAAU,CAAA,GAAA,4TAAA,CAAA,iBAAc,AAAD,EAAE,iIAAA,CAAA,KAAE,EAAE;QAC3B,UAAU;QACV,QAAQ;YACN,GAAG,qIAAM;QACX;IACF;IACA,SAAS,UAAU,eAAe,IAAI,UAAU,mBAAmB,IAAI;IACvE,iBAAiB;QACf,QAAQ;YACN,UAAU,UAAU,gBAAgB;YACpC,cAAc,UAAU,oBAAoB;QAG9C;IACF;IACA,kBAAkB;QAChB,SAAS;QACT,0BAA0B;QAC1B,mBAAmB;QACnB,mBAAmB;QACnB,YAAY;QACZ,mBAAmB,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE;YACrC,mDAAmD;YACnD,QAAQ,GAAG,CAAC,CAAC,6BAA6B,EAAE,KAAK,KAAK,CAAC,aAAa,EAAE,KAAK;QAC3E,mDAAmD;QACrD;QACA,6BAA6B;IAC/B;IACA,mBAAmB;QACjB,uBAAuB,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE;YACzC,iDAAiD;YACjD,QAAQ,GAAG,CAAC,CAAC,iCAAiC,EAAE,KAAK,KAAK,CAAC,oBAAoB,EAAE,KAAK;QACtF,+EAA+E;QACjF;QACA,cAAc;QACd,6BAA6B;QAC7B,WAAW;IACb;IACA,UAAU;QACR,0BAA0B;QAC1B,kBAAkB,oDAAyB;QAC3C,kBAAkB;QAClB,cAAc,sCAAwC,0BAAY;QAClE,yBAAyB;YACvB,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;QACZ;QACA,2BAA2B;QAC3B,WAAW;YACT,mBAAmB;QACrB;IACF;IACA,SAAS;QACP,WAAW,KAAK,KAAK,KAAK;QAC1B,WAAW,KAAK,KAAK;QACrB,aAAa;YACX,SAAS;YACT,QAAQ,KAAK,EAAE,sBAAsB;QACvC;IACF;IACA,gBAAgB,UAAU,mBAAmB,GAAG;QAAC,UAAU,mBAAmB;KAAC,GAAG;QAAC;KAAwB;IAC3G,SAAS;QACP,CAAA,GAAA,+SAAA,CAAA,cAAW,AAAD;KACX;AACH","debugId":null}},
    {"offset": {"line": 466, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/app/api/diagnostics/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { auth } from \"@/lib/auth\";\nimport { headers } from \"next/headers\";\n\ntype StatusLevel = \"ok\" | \"warn\" | \"error\";\n\ninterface DiagnosticsResponse {\n  timestamp: string;\n  env: {\n    POSTGRES_URL: boolean;\n    BETTER_AUTH_SECRET: boolean;\n    GOOGLE_CLIENT_ID: boolean;\n    GOOGLE_CLIENT_SECRET: boolean;\n    GEMINI_API_KEY: boolean;\n    NEXT_PUBLIC_APP_URL: boolean;\n  };\n  database: {\n    connected: boolean;\n    schemaApplied: boolean;\n    error?: string;\n  };\n  auth: {\n    configured: boolean;\n    routeResponding: boolean | null;\n  };\n  ai: {\n    configured: boolean;\n  };\n  overallStatus: StatusLevel;\n}\n\nexport async function GET(req: Request) {\n  // Verify authentication\n  const session = await auth.api.getSession({\n    headers: await headers(),\n  });\n\n  if (!session) {\n    return NextResponse.json(\n      { error: \"Unauthorized: Authentication required\" },\n      { status: 401 }\n    );\n  }\n\n  // Optional: Check for admin role if you have role-based access\n  // For now, we'll just require authentication\n  // In production, you should implement proper admin role checking\n  // if (session.user.role !== 'admin') {\n  //   return NextResponse.json(\n  //     { error: \"Forbidden: Admin access required\" },\n  //     { status: 403 }\n  //   );\n  // }\n  const env = {\n    POSTGRES_URL: Boolean(process.env.POSTGRES_URL),\n    BETTER_AUTH_SECRET: Boolean(process.env.BETTER_AUTH_SECRET),\n    GOOGLE_CLIENT_ID: Boolean(process.env.GOOGLE_CLIENT_ID),\n    GOOGLE_CLIENT_SECRET: Boolean(process.env.GOOGLE_CLIENT_SECRET),\n    GEMINI_API_KEY: Boolean(process.env.GEMINI_API_KEY),\n    NEXT_PUBLIC_APP_URL: Boolean(process.env.NEXT_PUBLIC_APP_URL),\n  } as const;\n\n  // Database checks\n  let dbConnected = false;\n  let schemaApplied = false;\n  let dbError: string | undefined;\n  if (env.POSTGRES_URL) {\n    try {\n      const [{ db }, { sql }, schema] = await Promise.all([\n        import(\"@/lib/db\"),\n        import(\"drizzle-orm\"),\n        import(\"@/lib/schema\"),\n      ]);\n      // Ping DB\n      await db.execute(sql`select 1`);\n      dbConnected = true;\n      try {\n        // Touch a known table to verify migrations\n        await db.select().from(schema.user).limit(1);\n        schemaApplied = true;\n      } catch {\n        schemaApplied = false;\n      }\n    } catch (err) {\n      dbConnected = false;\n      dbError = err instanceof Error ? err.message : \"Unknown database error\";\n    }\n  } else {\n    dbConnected = false;\n    schemaApplied = false;\n    dbError = \"POSTGRES_URL is not set\";\n  }\n\n  // Auth route check: we consider the route responding if it returns any HTTP response\n  // for /api/auth/session (status codes in the 2xx-4xx range are acceptable for readiness)\n  const origin = (() => {\n    try {\n      return new URL(req.url).origin;\n    } catch {\n      return process.env.NEXT_PUBLIC_APP_URL || \"http://localhost:3000\";\n    }\n  })();\n\n  let authRouteResponding: boolean | null = null;\n  try {\n    const res = await fetch(`${origin}/api/auth/session`, {\n      method: \"GET\",\n      headers: { Accept: \"application/json\" },\n      cache: \"no-store\",\n    });\n    authRouteResponding = res.status >= 200 && res.status < 500;\n  } catch {\n    authRouteResponding = false;\n  }\n\n  const authConfigured =\n    env.BETTER_AUTH_SECRET && env.GOOGLE_CLIENT_ID && env.GOOGLE_CLIENT_SECRET;\n  const aiConfigured = env.GEMINI_API_KEY; // We avoid live-calling the AI provider here\n\n  const overallStatus: StatusLevel = (() => {\n    if (!env.POSTGRES_URL || !dbConnected || !schemaApplied) return \"error\";\n    if (!authConfigured) return \"error\";\n    // AI is optional; warn if not configured\n    if (!aiConfigured) return \"warn\";\n    return \"ok\";\n  })();\n\n  const body: DiagnosticsResponse = {\n    timestamp: new Date().toISOString(),\n    env,\n    database: {\n      connected: dbConnected,\n      schemaApplied,\n      error: dbError,\n    },\n    auth: {\n      configured: authConfigured,\n      routeResponding: authRouteResponding,\n    },\n    ai: {\n      configured: aiConfigured,\n    },\n    overallStatus,\n  };\n\n  return NextResponse.json(body, {\n    status: 200,\n  });\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AA6BO,eAAe,IAAI,GAAY;IACpC,wBAAwB;IACxB,MAAM,UAAU,MAAM,mIAAA,CAAA,OAAI,CAAC,GAAG,CAAC,UAAU,CAAC;QACxC,SAAS,MAAM,CAAA,GAAA,0UAAA,CAAA,UAAO,AAAD;IACvB;IAEA,IAAI,CAAC,SAAS;QACZ,OAAO,yUAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwC,GACjD;YAAE,QAAQ;QAAI;IAElB;IAEA,+DAA+D;IAC/D,6CAA6C;IAC7C,iEAAiE;IACjE,uCAAuC;IACvC,8BAA8B;IAC9B,qDAAqD;IACrD,sBAAsB;IACtB,OAAO;IACP,IAAI;IACJ,MAAM,MAAM;QACV,cAAc,QAAQ,QAAQ,GAAG,CAAC,YAAY;QAC9C,oBAAoB,QAAQ,QAAQ,GAAG,CAAC,kBAAkB;QAC1D,kBAAkB,QAAQ,QAAQ,GAAG,CAAC,gBAAgB;QACtD,sBAAsB,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC9D,gBAAgB,QAAQ,QAAQ,GAAG,CAAC,cAAc;QAClD,qBAAqB;IACvB;IAEA,kBAAkB;IAClB,IAAI,cAAc;IAClB,IAAI,gBAAgB;IACpB,IAAI;IACJ,IAAI,IAAI,YAAY,EAAE;QACpB,IAAI;YACF,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,OAAO,GAAG,MAAM,QAAQ,GAAG,CAAC;;;;aAInD;YACD,UAAU;YACV,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;YAC9B,cAAc;YACd,IAAI;gBACF,2CAA2C;gBAC3C,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,KAAK,CAAC;gBAC1C,gBAAgB;YAClB,EAAE,OAAM;gBACN,gBAAgB;YAClB;QACF,EAAE,OAAO,KAAK;YACZ,cAAc;YACd,UAAU,eAAe,QAAQ,IAAI,OAAO,GAAG;QACjD;IACF,OAAO;QACL,cAAc;QACd,gBAAgB;QAChB,UAAU;IACZ;IAEA,qFAAqF;IACrF,yFAAyF;IACzF,MAAM,SAAS,CAAC;QACd,IAAI;YACF,OAAO,IAAI,IAAI,IAAI,GAAG,EAAE,MAAM;QAChC,EAAE,OAAM;YACN,OAAO,6DAAmC;QAC5C;IACF,CAAC;IAED,IAAI,sBAAsC;IAC1C,IAAI;QACF,MAAM,MAAM,MAAM,MAAM,GAAG,OAAO,iBAAiB,CAAC,EAAE;YACpD,QAAQ;YACR,SAAS;gBAAE,QAAQ;YAAmB;YACtC,OAAO;QACT;QACA,sBAAsB,IAAI,MAAM,IAAI,OAAO,IAAI,MAAM,GAAG;IAC1D,EAAE,OAAM;QACN,sBAAsB;IACxB;IAEA,MAAM,iBACJ,IAAI,kBAAkB,IAAI,IAAI,gBAAgB,IAAI,IAAI,oBAAoB;IAC5E,MAAM,eAAe,IAAI,cAAc,EAAE,6CAA6C;IAEtF,MAAM,gBAA6B,CAAC;QAClC,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,eAAe,CAAC,eAAe,OAAO;QAChE,IAAI,CAAC,gBAAgB,OAAO;QAC5B,yCAAyC;QACzC,IAAI,CAAC,cAAc,OAAO;QAC1B,OAAO;IACT,CAAC;IAED,MAAM,OAA4B;QAChC,WAAW,IAAI,OAAO,WAAW;QACjC;QACA,UAAU;YACR,WAAW;YACX;YACA,OAAO;QACT;QACA,MAAM;YACJ,YAAY;YACZ,iBAAiB;QACnB;QACA,IAAI;YACF,YAAY;QACd;QACA;IACF;IAEA,OAAO,yUAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;QAC7B,QAAQ;IACV;AACF","debugId":null}}]
}