{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, boolean } from \"drizzle-orm/pg-core\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"emailVerified\"),\n  image: text(\"image\"),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expiresAt\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n  ipAddress: text(\"ipAddress\"),\n  userAgent: text(\"userAgent\"),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"accountId\").notNull(),\n  providerId: text(\"providerId\").notNull(),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"accessToken\"),\n  refreshToken: text(\"refreshToken\"),\n  idToken: text(\"idToken\"),\n  accessTokenExpiresAt: timestamp(\"accessTokenExpiresAt\"),\n  refreshTokenExpiresAt: timestamp(\"refreshTokenExpiresAt\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n});\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expiresAt\").notNull(),\n  createdAt: timestamp(\"createdAt\").defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").defaultNow(),\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/packages/env/src/index.ts"],"sourcesContent":["import { z } from \"zod\";\n\n// Base environment schema with all possible variables\nconst baseEnvSchema = z.object({\n  // Application URLs\n  NEXT_PUBLIC_APP_URL: z.string().url().optional(),\n  NEXT_PUBLIC_WWW_URL: z.string().url().optional(),\n  NEXT_PUBLIC_DASHBOARD_URL: z.string().url().optional(),\n\n  // Database\n  POSTGRES_URL: z.string().min(1, \"Database URL is required\"),\n  DATABASE_URL: z.string().min(1).optional(), // Fallback for some tools\n\n  // Supabase\n  NEXT_PUBLIC_SUPABASE_URL: z.string().url(\"Invalid Supabase URL\"),\n  NEXT_PUBLIC_SUPABASE_ANON_KEY: z.string().min(1, \"Supabase anon key is required\"),\n  NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY: z.string().min(1).optional(),\n  SUPABASE_SERVICE_ROLE_KEY: z.string().min(1, \"Supabase service role key is required\"),\n\n  // Better Auth\n  BETTER_AUTH_SECRET: z.string().min(32, \"Better Auth secret must be at least 32 characters\"),\n  BETTER_AUTH_URL: z.string().url().optional(),\n  NEXT_PUBLIC_BETTER_AUTH_URL: z.string().url().optional(),\n\n  // Google OAuth\n  GOOGLE_CLIENT_ID: z.string().min(1, \"Google Client ID is required for authentication\"),\n  GOOGLE_CLIENT_SECRET: z.string().min(1, \"Google Client Secret is required for authentication\"),\n\n  // AI Services\n  OPENAI_API_KEY: z.string().min(1).optional(),\n  OPENAI_MODEL: z.string().default(\"gpt-4\").optional(),\n  GOOGLE_GENERATIVE_AI_API_KEY: z.string().min(1).optional(),\n  GEMINI_API_KEY: z.string().min(1).optional(),\n  GEMINI_MODEL: z.string().default(\"gemini-2.5-flash\").optional(),\n\n  // Analytics (Optional)\n  GOOGLE_ANALYTICS_ID: z.string().optional(),\n  FACEBOOK_PIXEL_ID: z.string().optional(),\n\n  // Email (Optional)\n  RESEND_API_KEY: z.string().optional(),\n\n  // Webhook Secrets (Optional)\n  WEBHOOK_SECRET_N8N: z.string().optional(),\n  WEBHOOK_SECRET_MAKE: z.string().optional(),\n  WEBHOOK_SECRET_ZAPIER: z.string().optional(),\n});\n\n// Server-side environment (has access to all variables)\nconst serverEnvSchema = baseEnvSchema;\n\n// Client-side environment (only NEXT_PUBLIC_ variables)\nconst clientEnvSchema = z.object({\n  NEXT_PUBLIC_APP_URL: baseEnvSchema.shape.NEXT_PUBLIC_APP_URL,\n  NEXT_PUBLIC_WWW_URL: baseEnvSchema.shape.NEXT_PUBLIC_WWW_URL,\n  NEXT_PUBLIC_DASHBOARD_URL: baseEnvSchema.shape.NEXT_PUBLIC_DASHBOARD_URL,\n  NEXT_PUBLIC_SUPABASE_URL: baseEnvSchema.shape.NEXT_PUBLIC_SUPABASE_URL,\n  NEXT_PUBLIC_SUPABASE_ANON_KEY: baseEnvSchema.shape.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n  NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY: baseEnvSchema.shape.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY,\n  NEXT_PUBLIC_BETTER_AUTH_URL: baseEnvSchema.shape.NEXT_PUBLIC_BETTER_AUTH_URL,\n});\n\n// Environment validation functions\nfunction validateServerEnv(): z.infer<typeof serverEnvSchema> {\n  try {\n    return serverEnvSchema.parse(process.env);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const issues = error.issues.map(issue => \n        `${issue.path.join('.')}: ${issue.message}`\n      ).join('\\n');\n      \n      throw new Error(\n        `Environment validation failed:\\n${issues}\\n\\n` +\n        `Please check your .env.local file in the root directory.`\n      );\n    }\n    throw error;\n  }\n}\n\nfunction validateClientEnv(): z.infer<typeof clientEnvSchema> {\n  const clientEnvVars = Object.keys(clientEnvSchema.shape).reduce((acc, key) => {\n    acc[key] = process.env[key];\n    return acc;\n  }, {} as Record<string, string | undefined>);\n\n  try {\n    return clientEnvSchema.parse(clientEnvVars);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const issues = error.issues.map(issue => \n        `${issue.path.join('.')}: ${issue.message}`\n      ).join('\\n');\n      \n      throw new Error(\n        `Client environment validation failed:\\n${issues}\\n\\n` +\n        `Please check your NEXT_PUBLIC_ variables in .env.local`\n      );\n    }\n    throw error;\n  }\n}\n\n// Create validated environment objects (lazy-loaded to avoid import-time errors)\nlet serverEnv: z.infer<typeof serverEnvSchema> | undefined;\nlet clientEnv: z.infer<typeof clientEnvSchema> | undefined;\n\n// Export types\nexport type ServerEnv = z.infer<typeof serverEnvSchema>;\nexport type ClientEnv = z.infer<typeof clientEnvSchema>;\n\n// Export validated environment objects with safe access\nexport const getServerEnv = (): z.infer<typeof serverEnvSchema> => {\n  if (typeof window !== 'undefined') {\n    throw new Error('Server environment is not available on client side');\n  }\n  if (!serverEnv) {\n    // Lazy initialization on first access\n    try {\n      serverEnv = validateServerEnv();\n    } catch (error) {\n      console.error('‚ùå Server environment validation failed:', error);\n      throw error;\n    }\n  }\n  return serverEnv;\n};\n\nexport const getClientEnv = (): z.infer<typeof clientEnvSchema> => {\n  if (!clientEnv) {\n    // Lazy initialization on first access\n    try {\n      if (typeof window === 'undefined') {\n        // Server-side: create client env from server env\n        const clientEnvVars = Object.keys(clientEnvSchema.shape).reduce((acc, key) => {\n          acc[key] = process.env[key];\n          return acc;\n        }, {} as Record<string, string | undefined>);\n        clientEnv = clientEnvSchema.parse(clientEnvVars);\n      } else {\n        // Client-side: validate client env\n        clientEnv = validateClientEnv();\n      }\n    } catch (error) {\n      console.error('‚ùå Client environment validation failed:', error);\n      throw error;\n    }\n  }\n  return clientEnv;\n};\n\n// For backwards compatibility and direct access\nexport { serverEnv, clientEnv };\n\n// Export validation functions for manual use\nexport { validateServerEnv, validateClientEnv };\n\n// Export schemas for extending\nexport { serverEnvSchema, clientEnvSchema, baseEnvSchema };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 356, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/db.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"./schema\";\nimport { getServerEnv } from \"@afarsemon/env\";\n\nconst serverEnv = getServerEnv();\n\n// Optimized PostgreSQL client configuration for Vercel serverless environment\nconst client = postgres(serverEnv.POSTGRES_URL, {\n  // SSL configuration for production\n  ssl: process.env.NODE_ENV === 'production' ? 'require' : false,\n  \n  // Serverless-optimized connection pool settings\n  max: 1, // Single connection for serverless functions\n  idle_timeout: 0, // No idle timeout - let Vercel handle cleanup\n  connect_timeout: 30, // Longer timeout for cold starts\n  \n  // Connection lifecycle for serverless\n  max_lifetime: 0, // No max lifetime - let connection be reused across invocations\n  prepare: false, // Disable prepared statements for better serverless compatibility\n  \n  // Transform configuration for production environments\n  transform: process.env.NODE_ENV === 'production' ? {\n    undefined: null, // Transform undefined to null for PostgreSQL compatibility\n  } : undefined,\n  \n  // Error handling and debugging\n  onnotice: process.env.NODE_ENV === 'development' ? console.log : undefined,\n  debug: process.env.NODE_ENV === 'development',\n  \n  // Additional production settings\n  connection: {\n    application_name: 'afarsemon-app',\n    // Enable keep-alive for production connections\n    ...(process.env.NODE_ENV === 'production' && {\n      options: '--search_path=public'\n    })\n  }\n});\n\nexport const db = drizzle(client, { schema });\n\n// Export the raw client for direct queries when needed\nexport { client as postgresClient };\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,YAAY,CAAA,GAAA,iIAAA,CAAA,eAAY,AAAD;AAE7B,8EAA8E;AAC9E,MAAM,SAAS,CAAA,GAAA,+LAAA,CAAA,UAAQ,AAAD,EAAE,UAAU,YAAY,EAAE;IAC9C,mCAAmC;IACnC,KAAK,sCAAwC,0BAAY;IAEzD,gDAAgD;IAChD,KAAK;IACL,cAAc;IACd,iBAAiB;IAEjB,sCAAsC;IACtC,cAAc;IACd,SAAS;IAET,sDAAsD;IACtD,WAAW,sCAAwC,0BAE/C;IAEJ,+BAA+B;IAC/B,UAAU,uCAAyC,QAAQ,GAAG,GAAG;IACjE,OAAO,oDAAyB;IAEhC,iCAAiC;IACjC,YAAY;QACV,kBAAkB;QAClB,+CAA+C;QAC/C,GAAI,oDAAyB,gBAAgB;YAC3C,SAAS;QACX,CAAC;IACH;AACF;AAEO,MAAM,KAAK,CAAA,GAAA,2WAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/production-env.ts"],"sourcesContent":["/**\n * Production Environment Variable Override\n * \n * This module ensures that production environment variables take precedence\n * over development variables, especially when dealing with localhost URLs\n * that might be loaded from symlinked .env.local files.\n */\n\n// Production URL mappings - these should always be used in production\nconst PRODUCTION_URL_OVERRIDES = {\n  'http://localhost:3000': 'https://afarsemon.com',\n  'localhost:3000': 'https://afarsemon.com',\n  'localhost': 'https://afarsemon.com'\n} as const;\n\n/**\n * Resolves environment variables with production-first priority\n * Filters out localhost URLs when in production environment\n */\nexport function getProductionSafeUrl(envVar: string | undefined, fallback: string): string {\n  if (!envVar) {\n    return fallback;\n  }\n\n  // In production, replace any localhost URLs with production URLs\n  if (process.env.NODE_ENV === 'production') {\n    // Check if the URL contains localhost and replace it\n    for (const [localUrl, prodUrl] of Object.entries(PRODUCTION_URL_OVERRIDES)) {\n      if (envVar.includes(localUrl)) {\n        console.warn(`[Prod URL Override] Replacing ${envVar} with ${prodUrl}`);\n        return prodUrl;\n      }\n    }\n  }\n\n  return envVar;\n}\n\n/**\n * Gets production-safe environment variables with proper fallbacks\n */\nexport function getProductionEnvVars() {\n  const isProduction = process.env.NODE_ENV === 'production';\n  \n  // Force production URLs when in production environment\n  const betterAuthUrl = isProduction \n    ? getProductionSafeUrl(process.env.BETTER_AUTH_URL, 'https://afarsemon.com')\n    : process.env.BETTER_AUTH_URL || 'http://localhost:3000';\n    \n  const publicBetterAuthUrl = isProduction \n    ? getProductionSafeUrl(process.env.NEXT_PUBLIC_BETTER_AUTH_URL, 'https://afarsemon.com')\n    : process.env.NEXT_PUBLIC_BETTER_AUTH_URL || 'http://localhost:3000';\n    \n  const publicAppUrl = isProduction \n    ? getProductionSafeUrl(process.env.NEXT_PUBLIC_APP_URL, 'https://afarsemon.com')\n    : process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n\n  return {\n    BETTER_AUTH_URL: betterAuthUrl,\n    NEXT_PUBLIC_BETTER_AUTH_URL: publicBetterAuthUrl,\n    NEXT_PUBLIC_APP_URL: publicAppUrl,\n    isProduction,\n    originalVars: {\n      BETTER_AUTH_URL: process.env.BETTER_AUTH_URL,\n      NEXT_PUBLIC_BETTER_AUTH_URL: process.env.NEXT_PUBLIC_BETTER_AUTH_URL,\n      NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n    }\n  };\n}\n\n/**\n * Production-aware base URL resolver\n */\nexport function resolveProductionBaseURL(): string {\n  const prodVars = getProductionEnvVars();\n  \n  if (prodVars.isProduction) {\n    // In production, prioritize production URLs\n    return prodVars.BETTER_AUTH_URL || \n           prodVars.NEXT_PUBLIC_BETTER_AUTH_URL || \n           prodVars.NEXT_PUBLIC_APP_URL || \n           'https://afarsemon.com';\n  }\n  \n  // In development, allow localhost\n  return prodVars.BETTER_AUTH_URL || \n         prodVars.NEXT_PUBLIC_BETTER_AUTH_URL || \n         prodVars.NEXT_PUBLIC_APP_URL || \n         'http://localhost:3000';\n}"],"names":[],"mappings":"AAAA;;;;;;CAMC,GAED,sEAAsE;;;;;;AACtE,MAAM,2BAA2B;IAC/B,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;AACf;AAMO,SAAS,qBAAqB,MAA0B,EAAE,QAAgB;IAC/E,IAAI,CAAC,QAAQ;QACX,OAAO;IACT;IAEA,iEAAiE;IACjE;;IAUA,OAAO;AACT;AAKO,SAAS;IACd,MAAM,eAAe,oDAAyB;IAE9C,uDAAuD;IACvD,MAAM,gBAAgB,sCAClB,0BACA,QAAQ,GAAG,CAAC,eAAe,IAAI;IAEnC,MAAM,sBAAsB,sCACxB,0BACA,6DAA2C;IAE/C,MAAM,eAAe,sCACjB,0BACA,6DAAmC;IAEvC,OAAO;QACL,iBAAiB;QACjB,6BAA6B;QAC7B,qBAAqB;QACrB;QACA,cAAc;YACZ,iBAAiB,QAAQ,GAAG,CAAC,eAAe;YAC5C,2BAA2B;YAC3B,mBAAmB;QACrB;IACF;AACF;AAKO,SAAS;IACd,MAAM,WAAW;IAEjB,IAAI,SAAS,YAAY,EAAE;QACzB,4CAA4C;QAC5C,OAAO,SAAS,eAAe,IACxB,SAAS,2BAA2B,IACpC,SAAS,mBAAmB,IAC5B;IACT;IAEA,kCAAkC;IAClC,OAAO,SAAS,eAAe,IACxB,SAAS,2BAA2B,IACpC,SAAS,mBAAmB,IAC5B;AACT","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/auth.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\"\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\"\nimport { nextCookies } from \"better-auth/next-js\"\nimport { db } from \"./db\"\nimport * as schema from \"./schema\"\nimport { getServerEnv } from \"@afarsemon/env\"\nimport { resolveProductionBaseURL, getProductionEnvVars } from \"./production-env\"\n\nconst serverEnv = getServerEnv();\nconst prodVars = getProductionEnvVars();\n\n// Use production-aware URL resolution\nconst resolvedBaseURL = resolveProductionBaseURL();\n\n// Add debug logging for configuration\nconsole.log('[Auth Config] Initializing Better Auth with:', {\n  baseURL: resolvedBaseURL,\n  hasGoogleClientId: !!serverEnv.GOOGLE_CLIENT_ID,\n  hasGoogleClientSecret: !!serverEnv.GOOGLE_CLIENT_SECRET,\n  hasBetterAuthSecret: !!serverEnv.BETTER_AUTH_SECRET,\n  hasPostgresUrl: !!serverEnv.POSTGRES_URL,\n  environment: process.env.NODE_ENV,\n  // Show both original and production-safe URLs\n  originalUrls: {\n    betterAuthUrl: serverEnv.BETTER_AUTH_URL,\n    publicBetterAuthUrl: serverEnv.NEXT_PUBLIC_BETTER_AUTH_URL,\n    publicAppUrl: serverEnv.NEXT_PUBLIC_APP_URL,\n  },\n  productionSafeUrls: {\n    betterAuthUrl: prodVars.BETTER_AUTH_URL,\n    publicBetterAuthUrl: prodVars.NEXT_PUBLIC_BETTER_AUTH_URL,\n    publicAppUrl: prodVars.NEXT_PUBLIC_APP_URL,\n  },\n  isProduction: prodVars.isProduction,\n  // Additional debugging\n  vercelEnv: process.env.VERCEL_ENV,\n  vercelUrl: process.env.VERCEL_URL,\n});\n\n// Warn if production is using localhost URLs\nif (process.env.NODE_ENV === 'production' && resolvedBaseURL.includes('localhost')) {\n  console.warn('‚ö†Ô∏è [CRITICAL] Production server auth is using localhost URL!');\n  console.warn('This will cause authentication failures. Check your production environment variables.');\n  console.warn('Expected production URL format: https://afarsemon.com');\n}\n\nexport const auth = betterAuth({\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n    schema: {\n      ...schema,\n    },\n  }),\n  baseURL: resolvedBaseURL,\n  secret: serverEnv.BETTER_AUTH_SECRET, // Explicitly set the secret\n  socialProviders: {\n    google: {\n      clientId: serverEnv.GOOGLE_CLIENT_ID,\n      clientSecret: serverEnv.GOOGLE_CLIENT_SECRET,\n      // Remove explicit redirectURI to let Better Auth generate it automatically\n      // This ensures it matches the baseURL + /api/auth/callback/google\n    },\n  },\n  emailAndPassword: {\n    enabled: true,\n    requireEmailVerification: false, // Disabled for development - no email service configured\n    minPasswordLength: 6, // Reduced for easier testing\n    maxPasswordLength: 128,\n    autoSignIn: true, // Sign in user automatically after successful registration\n    sendResetPassword: async ({ user, url }) => {\n      // TODO: Implement email sending for password reset\n      console.log(`Password reset requested for ${user.email}. Reset URL: ${url}`);\n      // In production, replace with actual email service\n    },\n    resetPasswordTokenExpiresIn: 3600, // 1 hour\n  },\n  emailVerification: {\n    sendVerificationEmail: async ({ user, url }) => {\n      // TODO: Implement email sending for verification\n      console.log(`Email verification requested for ${user.email}. Verification URL: ${url}`);\n      // In production, replace with actual email service like Resend, SendGrid, etc.\n    },\n    sendOnSignUp: true, // Automatically send verification email on sign up\n    autoSignInAfterVerification: true, // Sign in user after successful verification\n    expiresIn: 3600, // 1 hour\n  },\n  advanced: {\n    // Security configurations\n    useSecureCookies: process.env.NODE_ENV === \"production\",\n    disableCSRFCheck: false, // Keep CSRF protection enabled\n    cookiePrefix: process.env.NODE_ENV === \"production\" ? \"__Host-\" : \"\", // Use __Host- prefix only in production\n    defaultCookieAttributes: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"lax\", // CSRF protection\n    },\n    // IP tracking for security\n    ipAddress: {\n      disableIpTracking: false,\n    },\n  },\n  session: {\n    expiresIn: 60 * 60 * 24 * 7, // 7 days\n    updateAge: 60 * 60 * 24, // Update session every 24 hours\n    cookieCache: {\n      enabled: true,\n      maxAge: 60 * 5 // Cache for 5 minutes\n    }\n  },\n  trustedOrigins: [\n    resolvedBaseURL,\n    prodVars.NEXT_PUBLIC_APP_URL,\n    prodVars.BETTER_AUTH_URL,\n    prodVars.NEXT_PUBLIC_BETTER_AUTH_URL,\n    \"https://afarsemon.com\",\n    ...(prodVars.isProduction ? [] : [\"http://localhost:3000\"]) // Only allow localhost in development\n  ].filter((url): url is string => Boolean(url))\n   .filter((url, index, self) => self.indexOf(url) === index), // Remove duplicates\n  plugins: [\n    nextCookies(), // Must be the last plugin for Next.js cookie handling\n  ],\n})"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 587, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/rate-limit.ts"],"sourcesContent":["import { Ratelimit } from '@upstash/ratelimit';\nimport { Redis } from '@upstash/redis';\n\n// In-memory store for development fallback\nconst memoryStore = new Map<string, { count: number; resetTime: number }>();\n\n// Create a mock Redis interface for development\nclass MockRedis {\n  private store = memoryStore;\n\n  async evalsha(\n    _sha: string,\n    _keys: string[],\n    _args: (string | number)[]\n  ): Promise<[number, number]> {\n    // In development mode, be more lenient with rate limiting\n    if (process.env.NODE_ENV === 'development') {\n      // Simple in-memory rate limiting logic with shorter windows for development\n      const key = _keys[0];\n      const limit = _args[0] as number;\n      const window = Math.min(_args[1] as number, 10000); // Max 10 seconds in development\n      const now = Date.now();\n      \n      const entry = this.store.get(key);\n      \n      if (!entry || now > entry.resetTime) {\n        // Reset window\n        this.store.set(key, { count: 1, resetTime: now + window });\n        return [1, window];\n      }\n      \n      if (entry.count >= limit) {\n        // Rate limit exceeded\n        return [0, entry.resetTime - now];\n      }\n      \n      // Increment counter\n      entry.count++;\n      this.store.set(key, entry);\n      return [1, entry.resetTime - now];\n    }\n    \n    // Production logic (normal rate limiting)\n    const key = _keys[0];\n    const limit = _args[0] as number;\n    const window = _args[1] as number;\n    const now = Date.now();\n    \n    const entry = this.store.get(key);\n    \n    if (!entry || now > entry.resetTime) {\n      // Reset window\n      this.store.set(key, { count: 1, resetTime: now + window });\n      return [1, window];\n    }\n    \n    if (entry.count >= limit) {\n      // Rate limit exceeded\n      return [0, entry.resetTime - now];\n    }\n    \n    // Increment counter\n    entry.count++;\n    this.store.set(key, entry);\n    return [1, entry.resetTime - now];\n  }\n\n  // Add other required methods that Upstash Ratelimit might use\n  async get(): Promise<string | null> {\n    return null;\n  }\n\n  async set(): Promise<string> {\n    return 'OK';\n  }\n\n  async expire(): Promise<number> {\n    return 1;\n  }\n}\n\n// Create Redis instance for rate limiting\n// In production, this should use Upstash Redis credentials\n// In development, it can use a mock or local redis\nconst hasRedisConfig = !!(process.env.UPSTASH_REDIS_REST_URL && process.env.UPSTASH_REDIS_REST_TOKEN);\n\nconst redis = hasRedisConfig\n  ? new Redis({\n      url: process.env.UPSTASH_REDIS_REST_URL,\n      token: process.env.UPSTASH_REDIS_REST_TOKEN!,\n    })\n  : (() => {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn('[Rate Limit] Using in-memory fallback (development mode)');\n      } else {\n        console.warn('[Rate Limit] Redis not configured, using in-memory fallback');\n      }\n      return new MockRedis() as unknown as Redis;\n    })();\n\n// Create rate limiters for different endpoint types\nexport const createRateLimiter = (\n  requests: number,\n  window: string,\n  prefix: string = 'rl'\n) => {\n  return new Ratelimit({\n    redis,\n    limiter: Ratelimit.slidingWindow(requests, window as Parameters<typeof Ratelimit.slidingWindow>[1]),\n    prefix,\n  });\n};\n\n// Pre-configured rate limiters for different endpoint types\nexport const rateLimiters = {\n  // Webhooks: 10 requests per minute\n  webhook: createRateLimiter(10, '1 m', 'rl:webhook'),\n  \n  // Chat: 20 requests per minute\n  chat: createRateLimiter(20, '1 m', 'rl:chat'),\n  \n  // Auth: 5 requests per minute (stricter for security)\n  auth: createRateLimiter(5, '1 m', 'rl:auth'),\n  \n  // Debug: 3 requests per minute (very restrictive)\n  debug: createRateLimiter(3, '1 m', 'rl:debug'),\n  \n  // General API: 50 requests per minute\n  general: createRateLimiter(50, '1 m', 'rl:general'),\n  \n  // Strict rate limit for sensitive operations: 2 requests per minute\n  strict: createRateLimiter(2, '1 m', 'rl:strict'),\n};\n\n// Helper function to get client IP\nexport function getClientIP(request: Request): string {\n  const forwarded = request.headers.get('x-forwarded-for');\n  const real = request.headers.get('x-real-ip');\n  const cloudflare = request.headers.get('cf-connecting-ip');\n  \n  if (cloudflare) return cloudflare;\n  if (real) return real;\n  if (forwarded) return forwarded.split(',')[0].trim();\n  \n  return 'unknown';\n}\n\n// Development helper to clear rate limit cache\nexport function clearRateLimitCache(): void {\n  if (process.env.NODE_ENV === 'development') {\n    memoryStore.clear();\n    console.log('[Rate Limit] Development cache cleared');\n  }\n}\n\n// Rate limiting response helper\nexport function createRateLimitResponse(\n  success: boolean,\n  limit: number,\n  remaining: number,\n  reset: Date\n) {\n  if (success) {\n    return {\n      success: true,\n      headers: {\n        'X-RateLimit-Limit': limit.toString(),\n        'X-RateLimit-Remaining': remaining.toString(),\n        'X-RateLimit-Reset': reset.getTime().toString(),\n      },\n    };\n  }\n\n  return {\n    success: false,\n    error: 'Rate limit exceeded',\n    status: 429,\n    headers: {\n      'X-RateLimit-Limit': limit.toString(),\n      'X-RateLimit-Remaining': '0',\n      'X-RateLimit-Reset': reset.getTime().toString(),\n      'Retry-After': Math.ceil((reset.getTime() - Date.now()) / 1000).toString(),\n    },\n  };\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 736, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/security.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { auth } from '@/lib/auth';\nimport { headers } from 'next/headers';\nimport { z } from 'zod';\nimport { rateLimiters, getClientIP, createRateLimitResponse } from '@/lib/rate-limit';\n\n// Maximum payload sizes for different content types\nexport const MAX_PAYLOAD_SIZES = {\n  JSON: 1024 * 1024, // 1MB for JSON payloads\n  TEXT: 100 * 1024,  // 100KB for text\n  FORM: 10 * 1024,   // 10KB for form data\n} as const;\n\n// Security headers configuration\nexport const SECURITY_HEADERS = {\n  // Content Security Policy\n  'Content-Security-Policy': `\n    default-src 'self';\n    script-src 'self' 'unsafe-inline' 'unsafe-eval' https://vercel.live;\n    style-src 'self' 'unsafe-inline';\n    img-src 'self' data: https:;\n    font-src 'self' data:;\n    connect-src 'self' https: wss:;\n    frame-ancestors 'none';\n  `.replace(/\\s+/g, ' ').trim(),\n  \n  // Prevent XSS attacks\n  'X-XSS-Protection': '1; mode=block',\n  \n  // Prevent MIME type sniffing\n  'X-Content-Type-Options': 'nosniff',\n  \n  // Prevent clickjacking\n  'X-Frame-Options': 'DENY',\n  \n  // Enforce HTTPS\n  'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n  \n  // Remove server information\n  'Server': 'Next.js',\n  \n  // Prevent referrer leakage\n  'Referrer-Policy': 'strict-origin-when-cross-origin',\n} as const;\n\n// Validation schemas\nexport const webhookPathSchema = z.string().regex(\n  /^[a-zA-Z0-9-_]+$/,\n  'Webhook path must contain only alphanumeric characters, hyphens, and underscores'\n);\n\nexport const jsonPayloadSchema = z.object({}).passthrough().refine(\n  (data) => JSON.stringify(data).length <= MAX_PAYLOAD_SIZES.JSON,\n  { message: `Payload size must not exceed ${MAX_PAYLOAD_SIZES.JSON} bytes` }\n);\n\n// Input sanitization\nexport function sanitizeString(input: string): string {\n  return input\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '') // Remove script tags\n    .replace(/javascript:/gi, '') // Remove javascript: urls\n    .replace(/on\\w+=\"[^\"]*\"/gi, '') // Remove event handlers\n    .trim();\n}\n\nexport function sanitizeObject(obj: unknown): unknown {\n  if (typeof obj === 'string') {\n    return sanitizeString(obj);\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(sanitizeObject);\n  }\n  \n  if (obj && typeof obj === 'object') {\n    const sanitized: Record<string, unknown> = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[sanitizeString(key)] = sanitizeObject(value);\n    }\n    return sanitized;\n  }\n  \n  return obj;\n}\n\n// Type definitions for user objects\nexport type User = {\n  id: string;\n  email: string;\n  name?: string;\n  role?: string;\n  [key: string]: unknown;\n};\n\n// Helper to safely cast user object\nexport function castUser(user: unknown): User {\n  return user as User;\n}\n\n// Authentication helpers\nexport async function requireAuth(_request?: Request): Promise<{\n  success: boolean;\n  user?: User;\n  error?: string;\n}> {\n  try {\n    const requestHeaders = await headers();\n    const session = await auth.api.getSession({ headers: requestHeaders });\n    \n    if (!session?.user) {\n      return {\n        success: false,\n        error: 'Authentication required',\n      };\n    }\n    \n    return {\n      success: true,\n      user: session.user,\n    };\n  } catch (_error) {\n    return {\n      success: false,\n      error: 'Authentication failed',\n    };\n  }\n}\n\n// Admin authentication helper\nexport async function requireAdmin(_request?: Request): Promise<{\n  success: boolean;\n  user?: User;\n  error?: string;\n}> {\n  const authResult = await requireAuth(_request);\n  \n  if (!authResult.success) {\n    return authResult;\n  }\n  \n  // Check if user has admin role (you may need to adjust this based on your user schema)\n  const user = authResult.user as User;\n  const isAdmin = user?.role === 'admin' || user?.email === process.env.ADMIN_EMAIL;\n  \n  if (!isAdmin) {\n    return {\n      success: false,\n      error: 'Admin access required',\n    };\n  }\n  \n  return authResult;\n}\n\n// Development-only access helper\nexport function requireDevelopment(): { success: boolean; error?: string } {\n  if (process.env.NODE_ENV !== 'development') {\n    return {\n      success: false,\n      error: 'This endpoint is only available in development environment',\n    };\n  }\n  \n  return { success: true };\n}\n\n// CSRF protection\nexport function validateCSRF(request: Request): { success: boolean; error?: string } {\n  const origin = request.headers.get('origin');\n  const referer = request.headers.get('referer');\n  const host = request.headers.get('host');\n  \n  // Allow same-origin requests\n  if (origin) {\n    const originHost = new URL(origin).host;\n    if (originHost === host) {\n      return { success: true };\n    }\n  }\n  \n  // Allow referer-based validation\n  if (referer) {\n    const refererHost = new URL(referer).host;\n    if (refererHost === host) {\n      return { success: true };\n    }\n  }\n  \n  // In development, allow localhost requests\n  if (process.env.NODE_ENV === 'development' && host?.includes('localhost')) {\n    return { success: true };\n  }\n  \n  // Check for CSRF token header (you can implement token-based CSRF later)\n  const csrfToken = request.headers.get('x-csrf-token');\n  if (csrfToken === 'development' && process.env.NODE_ENV === 'development') {\n    return { success: true };\n  }\n  \n  return {\n    success: false,\n    error: 'CSRF validation failed',\n  };\n}\n\n// Payload size validation\nexport async function validatePayloadSize(\n  request: Request,\n  maxSize: number = MAX_PAYLOAD_SIZES.JSON\n): Promise<{ success: boolean; error?: string; data?: unknown }> {\n  try {\n    const contentLength = request.headers.get('content-length');\n    \n    if (contentLength && parseInt(contentLength) > maxSize) {\n      return {\n        success: false,\n        error: `Payload too large. Maximum size is ${maxSize} bytes`,\n      };\n    }\n    \n    const text = await request.text();\n    \n    if (text.length > maxSize) {\n      return {\n        success: false,\n        error: `Payload too large. Maximum size is ${maxSize} bytes`,\n      };\n    }\n    \n    // Try to parse as JSON if content-type suggests it\n    const contentType = request.headers.get('content-type');\n    if (contentType?.includes('application/json')) {\n      try {\n        const data = JSON.parse(text);\n        const sanitizedData = sanitizeObject(data);\n        return { success: true, data: sanitizedData };\n      } catch (_error) {\n        return {\n          success: false,\n          error: 'Invalid JSON payload',\n        };\n      }\n    }\n    \n    return { success: true, data: sanitizeString(text) };\n  } catch (_error) {\n    return {\n      success: false,\n      error: 'Failed to read request payload',\n    };\n  }\n}\n\n// Apply rate limiting\nexport async function applyRateLimit(\n  request: Request,\n  limiterType: keyof typeof rateLimiters\n): Promise<{ success: boolean; response?: NextResponse }> {\n  try {\n    const clientIP = getClientIP(request);\n    const identifier = `${clientIP}:${limiterType}`;\n    \n    const limiter = rateLimiters[limiterType];\n    const result = await limiter.limit(identifier);\n    \n    const rateLimitResponse = createRateLimitResponse(\n      result.success,\n      result.limit,\n      result.remaining,\n      new Date(result.reset)\n    );\n    \n    if (!rateLimitResponse.success) {\n      return {\n        success: false,\n        response: NextResponse.json(\n          { error: rateLimitResponse.error },\n          { \n            status: rateLimitResponse.status,\n            headers: rateLimitResponse.headers as Record<string, string>,\n          }\n        ),\n      };\n    }\n    \n    return { success: true };\n  } catch (error) {\n    // Log the error but don't block the request in development\n    console.warn('Rate limiting failed:', error);\n    \n    // In development, allow the request to proceed with a warning\n    if (process.env.NODE_ENV === 'development') {\n      console.warn(\n        `[Rate Limit] Fallback: Allowing request due to rate limiting error in development`\n      );\n      return { success: true };\n    }\n    \n    // In production, you might want to either:\n    // 1. Allow the request (fail open)\n    // 2. Block the request (fail closed)\n    // For now, we'll fail open to avoid service disruption\n    console.error('Rate limiting system failed, allowing request to proceed');\n    return { success: true };\n  }\n}\n\n// Create secure response with security headers\nexport function createSecureResponse(\n  data: unknown,\n  status: number = 200,\n  additionalHeaders: Record<string, string> = {}\n): NextResponse {\n  return NextResponse.json(data, {\n    status,\n    headers: {\n      ...SECURITY_HEADERS,\n      ...additionalHeaders,\n    },\n  });\n}\n\n// Error response without information leakage\nexport function createErrorResponse(\n  message: string,\n  status: number = 500,\n  logError?: unknown\n): NextResponse {\n  // Log the actual error for debugging but don't expose it\n  if (logError) {\n    console.error('API Error:', logError);\n  }\n  \n  // Generic error messages for production\n  const productionSafeMessage = process.env.NODE_ENV === 'production' \n    ? (status === 404 ? 'Not found' : status === 401 ? 'Unauthorized' : status === 403 ? 'Forbidden' : 'Internal server error')\n    : message;\n  \n  return createSecureResponse(\n    { error: productionSafeMessage },\n    status\n  );\n}\n\n// Comprehensive request validation\nexport async function validateRequest(\n  request: Request,\n  options: {\n    requireAuth?: boolean;\n    requireAdmin?: boolean;\n    rateLimitType?: keyof typeof rateLimiters;\n    maxPayloadSize?: number;\n    allowedMethods?: string[];\n    validateCSRF?: boolean;\n  } = {}\n): Promise<{\n  success: boolean;\n  response?: NextResponse;\n  data?: unknown;\n  user?: User;\n}> {\n  // Method validation\n  if (options.allowedMethods && !options.allowedMethods.includes(request.method)) {\n    return {\n      success: false,\n      response: createErrorResponse('Method not allowed', 405),\n    };\n  }\n  \n  // Rate limiting\n  if (options.rateLimitType) {\n    const rateLimitResult = await applyRateLimit(request, options.rateLimitType);\n    if (!rateLimitResult.success) {\n      return {\n        success: false,\n        response: rateLimitResult.response,\n      };\n    }\n  }\n  \n  // CSRF validation for non-GET requests\n  if (options.validateCSRF && request.method !== 'GET') {\n    const csrfResult = validateCSRF(request);\n    if (!csrfResult.success) {\n      return {\n        success: false,\n        response: createErrorResponse(csrfResult.error || 'CSRF validation failed', 403),\n      };\n    }\n  }\n  \n  // Authentication\n  let user;\n  if (options.requireAdmin) {\n    const adminResult = await requireAdmin(request);\n    if (!adminResult.success) {\n      return {\n        success: false,\n        response: createErrorResponse(adminResult.error || 'Admin access required', 403),\n      };\n    }\n    user = adminResult.user;\n  } else if (options.requireAuth) {\n    const authResult = await requireAuth(request);\n    if (!authResult.success) {\n      return {\n        success: false,\n        response: createErrorResponse(authResult.error || 'Authentication required', 401),\n      };\n    }\n    user = authResult.user;\n  }\n  \n  // Payload validation for non-GET requests\n  let data;\n  if (request.method !== 'GET' && request.method !== 'HEAD') {\n    const payloadResult = await validatePayloadSize(\n      request.clone(), // Clone to avoid consuming the stream\n      options.maxPayloadSize\n    );\n    if (!payloadResult.success) {\n      return {\n        success: false,\n        response: createErrorResponse(payloadResult.error || 'Invalid payload', 400),\n      };\n    }\n    data = payloadResult.data;\n  }\n  \n  return {\n    success: true,\n    data,\n    user,\n  };\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1078, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/app/api/health/route.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { \n  validateRequest, \n  createSecureResponse, \n  createErrorResponse\n} from '@/lib/security';\n\n/**\n * Health check endpoint\n * GET /api/health\n * \n * SECURITY: Public endpoint with rate limiting\n * Limited information exposure based on environment\n */\nexport async function GET(request: NextRequest) {\n  // Apply basic security validation without requiring authentication\n  // This is a health endpoint that should be accessible for monitoring\n  const validation = await validateRequest(request, {\n    requireAuth: false, // Public endpoint\n    rateLimitType: 'general', // 50 requests per minute\n    allowedMethods: ['GET'],\n  });\n\n  if (!validation.success) {\n    return validation.response!;\n  }\n\n  try {\n    // Basic health information - safe to expose\n    const healthInfo = {\n      status: \"healthy\",\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV,\n      message: \"API is running\"\n    };\n\n    // In development, provide more detailed information\n    if (process.env.NODE_ENV === 'development') {\n      const detailedInfo = {\n        ...healthInfo,\n        details: {\n          // Environment info (safe for development)\n          NODE_ENV: process.env.NODE_ENV,\n          VERCEL: process.env.VERCEL,\n          VERCEL_ENV: process.env.VERCEL_ENV,\n          VERCEL_URL: process.env.VERCEL_URL,\n          \n          // Public URLs\n          NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n          NEXT_PUBLIC_BETTER_AUTH_URL: process.env.NEXT_PUBLIC_BETTER_AUTH_URL,\n          NEXT_PUBLIC_WWW_URL: process.env.NEXT_PUBLIC_WWW_URL,\n          NEXT_PUBLIC_SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL,\n          \n          // Configuration status (existence only)\n          configuration: {\n            hasBETTER_AUTH_URL: !!process.env.BETTER_AUTH_URL,\n            hasBETTER_AUTH_SECRET: !!process.env.BETTER_AUTH_SECRET,\n            hasGOOGLE_CLIENT_ID: !!process.env.GOOGLE_CLIENT_ID,\n            hasGOOGLE_CLIENT_SECRET: !!process.env.GOOGLE_CLIENT_SECRET,\n            hasPOSTGRES_URL: !!process.env.POSTGRES_URL,\n            hasNEXT_PUBLIC_SUPABASE_ANON_KEY: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n            hasSUPABASE_SERVICE_ROLE_KEY: !!process.env.SUPABASE_SERVICE_ROLE_KEY,\n            hasUPSTASH_REDIS_REST_URL: !!process.env.UPSTASH_REDIS_REST_URL,\n            hasUPSTASH_REDIS_REST_TOKEN: !!process.env.UPSTASH_REDIS_REST_TOKEN,\n          }\n        }\n      };\n      \n      return createSecureResponse(detailedInfo, 200, {\n        'Cache-Control': 'no-store, no-cache, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n    }\n\n    // In production, only return basic health status\n    return createSecureResponse(healthInfo, 200, {\n      'Cache-Control': 'no-store, no-cache, must-revalidate',\n      'Pragma': 'no-cache',\n      'Expires': '0'\n    });\n\n  } catch (error) {\n    console.error('[Security] Health check error:', {\n      error: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString(),\n    });\n    \n    return createErrorResponse(\n      'Health check unavailable',\n      500,\n      error\n    );\n  }\n}"],"names":[],"mappings":";;;AACA;;AAaO,eAAe,IAAI,OAAoB;IAC5C,mEAAmE;IACnE,qEAAqE;IACrE,MAAM,aAAa,MAAM,CAAA,GAAA,uIAAA,CAAA,kBAAe,AAAD,EAAE,SAAS;QAChD,aAAa;QACb,eAAe;QACf,gBAAgB;YAAC;SAAM;IACzB;IAEA,IAAI,CAAC,WAAW,OAAO,EAAE;QACvB,OAAO,WAAW,QAAQ;IAC5B;IAEA,IAAI;QACF,4CAA4C;QAC5C,MAAM,aAAa;YACjB,QAAQ;YACR,WAAW,IAAI,OAAO,WAAW;YACjC,WAAW;YACX,SAAS;QACX;QAEA,oDAAoD;QACpD,wCAA4C;YAC1C,MAAM,eAAe;gBACnB,GAAG,UAAU;gBACb,SAAS;oBACP,0CAA0C;oBAC1C,QAAQ;oBACR,QAAQ,QAAQ,GAAG,CAAC,MAAM;oBAC1B,YAAY,QAAQ,GAAG,CAAC,UAAU;oBAClC,YAAY,QAAQ,GAAG,CAAC,UAAU;oBAElC,cAAc;oBACd,mBAAmB;oBACnB,2BAA2B;oBAC3B,mBAAmB;oBACnB,wBAAwB;oBAExB,wCAAwC;oBACxC,eAAe;wBACb,oBAAoB,CAAC,CAAC,QAAQ,GAAG,CAAC,eAAe;wBACjD,uBAAuB,CAAC,CAAC,QAAQ,GAAG,CAAC,kBAAkB;wBACvD,qBAAqB,CAAC,CAAC,QAAQ,GAAG,CAAC,gBAAgB;wBACnD,yBAAyB,CAAC,CAAC,QAAQ,GAAG,CAAC,oBAAoB;wBAC3D,iBAAiB,CAAC,CAAC,QAAQ,GAAG,CAAC,YAAY;wBAC3C,kCAAkC,CAAC;wBACnC,8BAA8B,CAAC,CAAC,QAAQ,GAAG,CAAC,yBAAyB;wBACrE,2BAA2B,CAAC,CAAC,QAAQ,GAAG,CAAC,sBAAsB;wBAC/D,6BAA6B,CAAC,CAAC,QAAQ,GAAG,CAAC,wBAAwB;oBACrE;gBACF;YACF;YAEA,OAAO,CAAA,GAAA,uIAAA,CAAA,uBAAoB,AAAD,EAAE,cAAc,KAAK;gBAC7C,iBAAiB;gBACjB,UAAU;gBACV,WAAW;YACb;QACF;;;IASF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;YAC9C,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAChD,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,OAAO,CAAA,GAAA,uIAAA,CAAA,sBAAmB,AAAD,EACvB,4BACA,KACA;IAEJ;AACF","debugId":null}}]
}