{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, boolean } from \"drizzle-orm/pg-core\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"emailVerified\"),\n  image: text(\"image\"),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expiresAt\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n  ipAddress: text(\"ipAddress\"),\n  userAgent: text(\"userAgent\"),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"accountId\").notNull(),\n  providerId: text(\"providerId\").notNull(),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"accessToken\"),\n  refreshToken: text(\"refreshToken\"),\n  idToken: text(\"idToken\"),\n  accessTokenExpiresAt: timestamp(\"accessTokenExpiresAt\"),\n  refreshTokenExpiresAt: timestamp(\"refreshTokenExpiresAt\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n});\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expiresAt\").notNull(),\n  createdAt: timestamp(\"createdAt\").defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").defaultNow(),\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/packages/env/src/index.ts"],"sourcesContent":["import { z } from \"zod\";\n\n// Base environment schema with all possible variables\nconst baseEnvSchema = z.object({\n  // Application URLs\n  NEXT_PUBLIC_APP_URL: z.string().url().optional(),\n  NEXT_PUBLIC_WWW_URL: z.string().url().optional(),\n  NEXT_PUBLIC_DASHBOARD_URL: z.string().url().optional(),\n\n  // Database\n  POSTGRES_URL: z.string().min(1, \"Database URL is required\"),\n  DATABASE_URL: z.string().min(1).optional(), // Fallback for some tools\n\n  // Supabase\n  NEXT_PUBLIC_SUPABASE_URL: z.string().url(\"Invalid Supabase URL\"),\n  NEXT_PUBLIC_SUPABASE_ANON_KEY: z.string().min(1, \"Supabase anon key is required\"),\n  NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY: z.string().min(1).optional(),\n  SUPABASE_SERVICE_ROLE_KEY: z.string().min(1, \"Supabase service role key is required\"),\n\n  // Better Auth\n  BETTER_AUTH_SECRET: z.string().min(32, \"Better Auth secret must be at least 32 characters\"),\n  BETTER_AUTH_URL: z.string().url().optional(),\n  NEXT_PUBLIC_BETTER_AUTH_URL: z.string().url().optional(),\n\n  // Google OAuth\n  GOOGLE_CLIENT_ID: z.string().min(1, \"Google Client ID is required for authentication\"),\n  GOOGLE_CLIENT_SECRET: z.string().min(1, \"Google Client Secret is required for authentication\"),\n\n  // AI Services\n  OPENAI_API_KEY: z.string().min(1).optional(),\n  OPENAI_MODEL: z.string().default(\"gpt-4\").optional(),\n  GOOGLE_GENERATIVE_AI_API_KEY: z.string().min(1).optional(),\n  GEMINI_API_KEY: z.string().min(1).optional(),\n  GEMINI_MODEL: z.string().default(\"gemini-2.5-flash\").optional(),\n\n  // Analytics (Optional)\n  GOOGLE_ANALYTICS_ID: z.string().optional(),\n  FACEBOOK_PIXEL_ID: z.string().optional(),\n\n  // Email (Optional)\n  RESEND_API_KEY: z.string().optional(),\n\n  // Webhook Secrets (Optional)\n  WEBHOOK_SECRET_N8N: z.string().optional(),\n  WEBHOOK_SECRET_MAKE: z.string().optional(),\n  WEBHOOK_SECRET_ZAPIER: z.string().optional(),\n});\n\n// Server-side environment (has access to all variables)\nconst serverEnvSchema = baseEnvSchema;\n\n// Client-side environment (only NEXT_PUBLIC_ variables)\nconst clientEnvSchema = z.object({\n  NEXT_PUBLIC_APP_URL: baseEnvSchema.shape.NEXT_PUBLIC_APP_URL,\n  NEXT_PUBLIC_WWW_URL: baseEnvSchema.shape.NEXT_PUBLIC_WWW_URL,\n  NEXT_PUBLIC_DASHBOARD_URL: baseEnvSchema.shape.NEXT_PUBLIC_DASHBOARD_URL,\n  NEXT_PUBLIC_SUPABASE_URL: baseEnvSchema.shape.NEXT_PUBLIC_SUPABASE_URL,\n  NEXT_PUBLIC_SUPABASE_ANON_KEY: baseEnvSchema.shape.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n  NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY: baseEnvSchema.shape.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY,\n  NEXT_PUBLIC_BETTER_AUTH_URL: baseEnvSchema.shape.NEXT_PUBLIC_BETTER_AUTH_URL,\n});\n\n// Environment validation functions\nfunction validateServerEnv(): z.infer<typeof serverEnvSchema> {\n  try {\n    return serverEnvSchema.parse(process.env);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const issues = error.issues.map(issue => \n        `${issue.path.join('.')}: ${issue.message}`\n      ).join('\\n');\n      \n      throw new Error(\n        `Environment validation failed:\\n${issues}\\n\\n` +\n        `Please check your .env.local file in the root directory.`\n      );\n    }\n    throw error;\n  }\n}\n\nfunction validateClientEnv(): z.infer<typeof clientEnvSchema> {\n  const clientEnvVars = Object.keys(clientEnvSchema.shape).reduce((acc, key) => {\n    acc[key] = process.env[key];\n    return acc;\n  }, {} as Record<string, string | undefined>);\n\n  try {\n    return clientEnvSchema.parse(clientEnvVars);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const issues = error.issues.map(issue => \n        `${issue.path.join('.')}: ${issue.message}`\n      ).join('\\n');\n      \n      throw new Error(\n        `Client environment validation failed:\\n${issues}\\n\\n` +\n        `Please check your NEXT_PUBLIC_ variables in .env.local`\n      );\n    }\n    throw error;\n  }\n}\n\n// Create validated environment objects (lazy-loaded to avoid import-time errors)\nlet serverEnv: z.infer<typeof serverEnvSchema> | undefined;\nlet clientEnv: z.infer<typeof clientEnvSchema> | undefined;\n\n// Export types\nexport type ServerEnv = z.infer<typeof serverEnvSchema>;\nexport type ClientEnv = z.infer<typeof clientEnvSchema>;\n\n// Export validated environment objects with safe access\nexport const getServerEnv = (): z.infer<typeof serverEnvSchema> => {\n  if (typeof window !== 'undefined') {\n    throw new Error('Server environment is not available on client side');\n  }\n  if (!serverEnv) {\n    // Lazy initialization on first access\n    try {\n      serverEnv = validateServerEnv();\n    } catch (error) {\n      console.error('‚ùå Server environment validation failed:', error);\n      throw error;\n    }\n  }\n  return serverEnv;\n};\n\nexport const getClientEnv = (): z.infer<typeof clientEnvSchema> => {\n  if (!clientEnv) {\n    // Lazy initialization on first access\n    try {\n      if (typeof window === 'undefined') {\n        // Server-side: create client env from server env\n        const clientEnvVars = Object.keys(clientEnvSchema.shape).reduce((acc, key) => {\n          acc[key] = process.env[key];\n          return acc;\n        }, {} as Record<string, string | undefined>);\n        clientEnv = clientEnvSchema.parse(clientEnvVars);\n      } else {\n        // Client-side: validate client env\n        clientEnv = validateClientEnv();\n      }\n    } catch (error) {\n      console.error('‚ùå Client environment validation failed:', error);\n      throw error;\n    }\n  }\n  return clientEnv;\n};\n\n// For backwards compatibility and direct access\nexport { serverEnv, clientEnv };\n\n// Export validation functions for manual use\nexport { validateServerEnv, validateClientEnv };\n\n// Export schemas for extending\nexport { serverEnvSchema, clientEnvSchema, baseEnvSchema };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/db.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"./schema\";\nimport { getServerEnv } from \"@afarsemon/env\";\n\nconst serverEnv = getServerEnv();\nconst client = postgres(serverEnv.POSTGRES_URL);\nexport const db = drizzle(client, { schema });\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,YAAY,CAAA,GAAA,iIAAA,CAAA,eAAY,AAAD;AAC7B,MAAM,SAAS,CAAA,GAAA,+LAAA,CAAA,UAAQ,AAAD,EAAE,UAAU,YAAY;AACvC,MAAM,KAAK,CAAA,GAAA,kWAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/app/api/auth/test-db/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { db } from '@/lib/db';\nimport { user } from '@/lib/schema';\nimport { count } from 'drizzle-orm';\n\n/**\n * Test endpoint to verify database connection and Better Auth tables\n * GET /api/auth/test-db\n */\nexport async function GET() {\n  if (process.env.NODE_ENV !== 'development') {\n    return NextResponse.json({ \n      error: 'This endpoint is only available in development' \n    }, { status: 403 });\n  }\n\n  try {\n    console.log('Testing database connection...');\n    \n    // Test basic database connection\n    const userCount = await db.select({ count: count() }).from(user);\n    \n    console.log('Database connection successful. User count:', userCount[0]?.count || 0);\n    \n    // Test if we can query the auth tables\n    const tables = ['user', 'session', 'account', 'verification'];\n    const tableStatus: Record<string, { exists: boolean; count?: number; error?: string }> = {};\n    \n    for (const tableName of tables) {\n      try {\n        // This is a basic existence check - we try to count rows\n        const result = await db.execute(`SELECT COUNT(*) as count FROM \"${tableName}\"`);\n        \n        tableStatus[tableName] = {\n          exists: true,\n          count: (result as unknown as { count: number }[])?.[0]?.count || 0\n        };\n      } catch (error) {\n        tableStatus[tableName] = {\n          exists: false,\n          error: error instanceof Error ? error.message : String(error)\n        };\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Database connection successful',\n      userCount: userCount[0]?.count || 0,\n      tables: tableStatus,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Database connection test failed:', error);\n    \n    return NextResponse.json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown database error',\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAMO,eAAe;IACpB;;IAMA,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,iCAAiC;QACjC,MAAM,YAAY,MAAM,iIAAA,CAAA,KAAE,CAAC,MAAM,CAAC;YAAE,OAAO,CAAA,GAAA,uWAAA,CAAA,QAAK,AAAD;QAAI,GAAG,IAAI,CAAC,qIAAA,CAAA,OAAI;QAE/D,QAAQ,GAAG,CAAC,+CAA+C,SAAS,CAAC,EAAE,EAAE,SAAS;QAElF,uCAAuC;QACvC,MAAM,SAAS;YAAC;YAAQ;YAAW;YAAW;SAAe;QAC7D,MAAM,cAAmF,CAAC;QAE1F,KAAK,MAAM,aAAa,OAAQ;YAC9B,IAAI;gBACF,yDAAyD;gBACzD,MAAM,SAAS,MAAM,iIAAA,CAAA,KAAE,CAAC,OAAO,CAAC,CAAC,+BAA+B,EAAE,UAAU,CAAC,CAAC;gBAE9E,WAAW,CAAC,UAAU,GAAG;oBACvB,QAAQ;oBACR,OAAO,AAAC,QAA2C,CAAC,EAAE,EAAE,SAAS;gBACnE;YACF,EAAE,OAAO,OAAO;gBACd,WAAW,CAAC,UAAU,GAAG;oBACvB,QAAQ;oBACR,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;gBACzD;YACF;QACF;QAEA,OAAO,yUAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,WAAW,SAAS,CAAC,EAAE,EAAE,SAAS;YAClC,QAAQ;YACR,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAElD,OAAO,yUAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAChD,WAAW,IAAI,OAAO,WAAW;QACnC,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}