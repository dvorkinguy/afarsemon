{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, boolean } from \"drizzle-orm/pg-core\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"emailVerified\"),\n  image: text(\"image\"),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expiresAt\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n  ipAddress: text(\"ipAddress\"),\n  userAgent: text(\"userAgent\"),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"accountId\").notNull(),\n  providerId: text(\"providerId\").notNull(),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"accessToken\"),\n  refreshToken: text(\"refreshToken\"),\n  idToken: text(\"idToken\"),\n  accessTokenExpiresAt: timestamp(\"accessTokenExpiresAt\"),\n  refreshTokenExpiresAt: timestamp(\"refreshTokenExpiresAt\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n});\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expiresAt\").notNull(),\n  createdAt: timestamp(\"createdAt\").defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").defaultNow(),\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/db.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"./schema\";\n\nconst connectionString = process.env.POSTGRES_URL as string;\n\nif (!connectionString) {\n  throw new Error(\"POSTGRES_URL environment variable is not set\");\n}\n\nconst client = postgres(connectionString);\nexport const db = drizzle(client, { schema });\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AAEjD,IAAI,CAAC,kBAAkB;IACrB,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,SAAS,CAAA,GAAA,+LAAA,CAAA,UAAQ,AAAD,EAAE;AACjB,MAAM,KAAK,CAAA,GAAA,kWAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/auth.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\"\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\"\nimport { db } from \"./db\"\n\nexport const auth = betterAuth({\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n  }),\n  socialProviders: {\n    google: {\n      clientId: process.env.GOOGLE_CLIENT_ID as string,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,\n    },\n  },\n  advanced: {\n    // Enable CSRF protection\n    useSecureCookies: process.env.NODE_ENV === \"production\",\n    cookiePrefix: \"__Host-\" // Use __Host- prefix for enhanced security in production\n  },\n  session: {\n    expiresIn: 60 * 60 * 24 * 7, // 7 days\n    updateAge: 60 * 60 * 24, // Update session every 24 hours\n    cookieCache: {\n      enabled: true,\n      maxAge: 60 * 5 // Cache for 5 minutes\n    }\n  },\n  trustedOrigins: process.env.NEXT_PUBLIC_APP_URL ? [process.env.NEXT_PUBLIC_APP_URL] : undefined,\n})"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAEO,MAAM,OAAO,CAAA,GAAA,4VAAA,CAAA,aAAU,AAAD,EAAE;IAC7B,UAAU,CAAA,GAAA,4TAAA,CAAA,iBAAc,AAAD,EAAE,iIAAA,CAAA,KAAE,EAAE;QAC3B,UAAU;IACZ;IACA,iBAAiB;QACf,QAAQ;YACN,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;IACF;IACA,UAAU;QACR,yBAAyB;QACzB,kBAAkB,oDAAyB;QAC3C,cAAc,UAAU,yDAAyD;IACnF;IACA,SAAS;QACP,WAAW,KAAK,KAAK,KAAK;QAC1B,WAAW,KAAK,KAAK;QACrB,aAAa;YACX,SAAS;YACT,QAAQ,KAAK,EAAE,sBAAsB;QACvC;IACF;IACA,gBAAgB,QAAQ,GAAG,CAAC,mBAAmB,GAAG;QAAC,QAAQ,GAAG,CAAC,mBAAmB;KAAC,GAAG;AACxF","debugId":null}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/app/api/auth/%5B...all%5D/route.ts"],"sourcesContent":["import { auth } from \"@/lib/auth\"\nimport { toNextJsHandler } from \"better-auth/next-js\"\n\nexport const { GET, POST } = toNextJsHandler(auth)"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,+SAAA,CAAA,kBAAe,AAAD,EAAE,mIAAA,CAAA,OAAI","debugId":null}}]
}