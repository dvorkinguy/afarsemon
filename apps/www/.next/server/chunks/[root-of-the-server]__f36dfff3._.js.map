{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, boolean } from \"drizzle-orm/pg-core\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"emailVerified\"),\n  image: text(\"image\"),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expiresAt\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n  ipAddress: text(\"ipAddress\"),\n  userAgent: text(\"userAgent\"),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"accountId\").notNull(),\n  providerId: text(\"providerId\").notNull(),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"accessToken\"),\n  refreshToken: text(\"refreshToken\"),\n  idToken: text(\"idToken\"),\n  accessTokenExpiresAt: timestamp(\"accessTokenExpiresAt\"),\n  refreshTokenExpiresAt: timestamp(\"refreshTokenExpiresAt\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").notNull().defaultNow(),\n});\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expiresAt\").notNull(),\n  createdAt: timestamp(\"createdAt\").defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").defaultNow(),\n});\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;;AAEO,MAAM,OAAO,CAAA,GAAA,6VAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAClC,IAAI,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU;IACzB,MAAM,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,OAAO;IAC1B,OAAO,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE,SAAS,OAAO,GAAG,MAAM;IACrC,eAAe,CAAA,GAAA,0WAAA,CAAA,UAAO,AAAD,EAAE;IACvB,OAAO,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE;IACZ,WAAW,CAAA,GAAA,4WAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;IACtD,WAAW,CAAA,GAAA,4WAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;AACxD;AAEO,MAAM,UAAU,CAAA,GAAA,6VAAA,CAAA,UAAO,AAAD,EAAE,WAAW;IACxC,IAAI,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU;IACzB,WAAW,CAAA,GAAA,4WAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO;IACzC,OAAO,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE,SAAS,OAAO,GAAG,MAAM;IACrC,WAAW,CAAA,GAAA,4WAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;IACtD,WAAW,CAAA,GAAA,4WAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;IACtD,WAAW,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE;IAChB,WAAW,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE;IAChB,QAAQ,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE,UACV,OAAO,GACP,UAAU,CAAC,IAAM,KAAK,EAAE,EAAE;QAAE,UAAU;IAAU;AACrD;AAEO,MAAM,UAAU,CAAA,GAAA,6VAAA,CAAA,UAAO,AAAD,EAAE,WAAW;IACxC,IAAI,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU;IACzB,WAAW,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE,aAAa,OAAO;IACpC,YAAY,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE,cAAc,OAAO;IACtC,QAAQ,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE,UACV,OAAO,GACP,UAAU,CAAC,IAAM,KAAK,EAAE,EAAE;QAAE,UAAU;IAAU;IACnD,aAAa,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE;IAClB,cAAc,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE;IACnB,SAAS,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE;IACd,sBAAsB,CAAA,GAAA,4WAAA,CAAA,YAAS,AAAD,EAAE;IAChC,uBAAuB,CAAA,GAAA,4WAAA,CAAA,YAAS,AAAD,EAAE;IACjC,OAAO,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE;IACZ,UAAU,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE;IACf,WAAW,CAAA,GAAA,4WAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;IACtD,WAAW,CAAA,GAAA,4WAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;AACxD;AAEO,MAAM,eAAe,CAAA,GAAA,6VAAA,CAAA,UAAO,AAAD,EAAE,gBAAgB;IAClD,IAAI,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU;IACzB,YAAY,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE,cAAc,OAAO;IACtC,OAAO,CAAA,GAAA,uWAAA,CAAA,OAAI,AAAD,EAAE,SAAS,OAAO;IAC5B,WAAW,CAAA,GAAA,4WAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO;IACzC,WAAW,CAAA,GAAA,4WAAA,CAAA,YAAS,AAAD,EAAE,aAAa,UAAU;IAC5C,WAAW,CAAA,GAAA,4WAAA,CAAA,YAAS,AAAD,EAAE,aAAa,UAAU;AAC9C","debugId":null}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/packages/env/src/index.ts"],"sourcesContent":["import { z } from \"zod\";\n\n// Base environment schema with all possible variables\nconst baseEnvSchema = z.object({\n  // Application URLs\n  NEXT_PUBLIC_APP_URL: z.string().url().optional(),\n  NEXT_PUBLIC_WWW_URL: z.string().url().optional(),\n  NEXT_PUBLIC_DASHBOARD_URL: z.string().url().optional(),\n\n  // Database\n  POSTGRES_URL: z.string().min(1, \"Database URL is required\"),\n  DATABASE_URL: z.string().min(1).optional(), // Fallback for some tools\n\n  // Supabase\n  NEXT_PUBLIC_SUPABASE_URL: z.string().url(\"Invalid Supabase URL\"),\n  NEXT_PUBLIC_SUPABASE_ANON_KEY: z.string().min(1, \"Supabase anon key is required\"),\n  NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY: z.string().min(1).optional(),\n  SUPABASE_SERVICE_ROLE_KEY: z.string().min(1, \"Supabase service role key is required\"),\n\n  // Better Auth\n  BETTER_AUTH_SECRET: z.string().min(32, \"Better Auth secret must be at least 32 characters\"),\n  BETTER_AUTH_URL: z.string().url().optional(),\n  NEXT_PUBLIC_BETTER_AUTH_URL: z.string().url().optional(),\n\n  // Google OAuth\n  GOOGLE_CLIENT_ID: z.string().min(1, \"Google Client ID is required for authentication\"),\n  GOOGLE_CLIENT_SECRET: z.string().min(1, \"Google Client Secret is required for authentication\"),\n\n  // AI Services\n  OPENAI_API_KEY: z.string().min(1).optional(),\n  OPENAI_MODEL: z.string().default(\"gpt-4\").optional(),\n  GOOGLE_GENERATIVE_AI_API_KEY: z.string().min(1).optional(),\n  GEMINI_API_KEY: z.string().min(1).optional(),\n  GEMINI_MODEL: z.string().default(\"gemini-2.5-flash\").optional(),\n\n  // Analytics (Optional)\n  GOOGLE_ANALYTICS_ID: z.string().optional(),\n  FACEBOOK_PIXEL_ID: z.string().optional(),\n\n  // Email (Optional)\n  RESEND_API_KEY: z.string().optional(),\n\n  // Webhook Secrets (Optional)\n  WEBHOOK_SECRET_N8N: z.string().optional(),\n  WEBHOOK_SECRET_MAKE: z.string().optional(),\n  WEBHOOK_SECRET_ZAPIER: z.string().optional(),\n});\n\n// Server-side environment (has access to all variables)\nconst serverEnvSchema = baseEnvSchema;\n\n// Client-side environment (only NEXT_PUBLIC_ variables)\nconst clientEnvSchema = z.object({\n  NEXT_PUBLIC_APP_URL: baseEnvSchema.shape.NEXT_PUBLIC_APP_URL,\n  NEXT_PUBLIC_WWW_URL: baseEnvSchema.shape.NEXT_PUBLIC_WWW_URL,\n  NEXT_PUBLIC_DASHBOARD_URL: baseEnvSchema.shape.NEXT_PUBLIC_DASHBOARD_URL,\n  NEXT_PUBLIC_SUPABASE_URL: baseEnvSchema.shape.NEXT_PUBLIC_SUPABASE_URL,\n  NEXT_PUBLIC_SUPABASE_ANON_KEY: baseEnvSchema.shape.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n  NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY: baseEnvSchema.shape.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY,\n  NEXT_PUBLIC_BETTER_AUTH_URL: baseEnvSchema.shape.NEXT_PUBLIC_BETTER_AUTH_URL,\n});\n\n// Environment validation functions\nfunction validateServerEnv(): z.infer<typeof serverEnvSchema> {\n  try {\n    return serverEnvSchema.parse(process.env);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const issues = error.issues.map(issue => \n        `${issue.path.join('.')}: ${issue.message}`\n      ).join('\\n');\n      \n      throw new Error(\n        `Environment validation failed:\\n${issues}\\n\\n` +\n        `Please check your .env.local file in the root directory.`\n      );\n    }\n    throw error;\n  }\n}\n\nfunction validateClientEnv(): z.infer<typeof clientEnvSchema> {\n  const clientEnvVars = Object.keys(clientEnvSchema.shape).reduce((acc, key) => {\n    acc[key] = process.env[key];\n    return acc;\n  }, {} as Record<string, string | undefined>);\n\n  try {\n    return clientEnvSchema.parse(clientEnvVars);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const issues = error.issues.map(issue => \n        `${issue.path.join('.')}: ${issue.message}`\n      ).join('\\n');\n      \n      throw new Error(\n        `Client environment validation failed:\\n${issues}\\n\\n` +\n        `Please check your NEXT_PUBLIC_ variables in .env.local`\n      );\n    }\n    throw error;\n  }\n}\n\n// Create validated environment objects (lazy-loaded to avoid import-time errors)\nlet serverEnv: z.infer<typeof serverEnvSchema> | undefined;\nlet clientEnv: z.infer<typeof clientEnvSchema> | undefined;\n\n// Export types\nexport type ServerEnv = z.infer<typeof serverEnvSchema>;\nexport type ClientEnv = z.infer<typeof clientEnvSchema>;\n\n// Export validated environment objects with safe access\nexport const getServerEnv = (): z.infer<typeof serverEnvSchema> => {\n  if (typeof window !== 'undefined') {\n    throw new Error('Server environment is not available on client side');\n  }\n  if (!serverEnv) {\n    // Lazy initialization on first access\n    try {\n      serverEnv = validateServerEnv();\n    } catch (error) {\n      console.error('‚ùå Server environment validation failed:', error);\n      throw error;\n    }\n  }\n  return serverEnv;\n};\n\nexport const getClientEnv = (): z.infer<typeof clientEnvSchema> => {\n  if (!clientEnv) {\n    // Lazy initialization on first access\n    try {\n      if (typeof window === 'undefined') {\n        // Server-side: create client env from server env\n        const clientEnvVars = Object.keys(clientEnvSchema.shape).reduce((acc, key) => {\n          acc[key] = process.env[key];\n          return acc;\n        }, {} as Record<string, string | undefined>);\n        clientEnv = clientEnvSchema.parse(clientEnvVars);\n      } else {\n        // Client-side: validate client env\n        clientEnv = validateClientEnv();\n      }\n    } catch (error) {\n      console.error('‚ùå Client environment validation failed:', error);\n      throw error;\n    }\n  }\n  return clientEnv;\n};\n\n// For backwards compatibility and direct access\nexport { serverEnv, clientEnv };\n\n// Export validation functions for manual use\nexport { validateServerEnv, validateClientEnv };\n\n// Export schemas for extending\nexport { serverEnvSchema, clientEnvSchema, baseEnvSchema };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/db.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"./schema\";\nimport { getServerEnv } from \"@afarsemon/env\";\n\nconst serverEnv = getServerEnv();\n\n// Optimized PostgreSQL client configuration for Vercel serverless environment\nconst client = postgres(serverEnv.POSTGRES_URL, {\n  // SSL configuration for production\n  ssl: process.env.NODE_ENV === 'production' ? 'require' : false,\n  \n  // Serverless-optimized connection pool settings\n  max: 1, // Single connection for serverless functions\n  idle_timeout: 0, // No idle timeout - let Vercel handle cleanup\n  connect_timeout: 30, // Longer timeout for cold starts\n  \n  // Connection lifecycle for serverless\n  max_lifetime: 0, // No max lifetime - let connection be reused across invocations\n  prepare: false, // Disable prepared statements for better serverless compatibility\n  \n  // Transform configuration for production environments\n  transform: process.env.NODE_ENV === 'production' ? {\n    undefined: null, // Transform undefined to null for PostgreSQL compatibility\n  } : undefined,\n  \n  // Error handling and debugging\n  onnotice: process.env.NODE_ENV === 'development' ? console.log : undefined,\n  debug: process.env.NODE_ENV === 'development',\n  \n  // Additional production settings\n  connection: {\n    application_name: 'afarsemon-app',\n    // Enable keep-alive for production connections\n    ...(process.env.NODE_ENV === 'production' && {\n      options: '--search_path=public'\n    })\n  }\n});\n\nexport const db = drizzle(client, { schema });\n\n// Export the raw client for direct queries when needed\nexport { client as postgresClient };\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,YAAY,CAAA,GAAA,iIAAA,CAAA,eAAY,AAAD;AAE7B,8EAA8E;AAC9E,MAAM,SAAS,CAAA,GAAA,+LAAA,CAAA,UAAQ,AAAD,EAAE,UAAU,YAAY,EAAE;IAC9C,mCAAmC;IACnC,KAAK,sCAAwC,0BAAY;IAEzD,gDAAgD;IAChD,KAAK;IACL,cAAc;IACd,iBAAiB;IAEjB,sCAAsC;IACtC,cAAc;IACd,SAAS;IAET,sDAAsD;IACtD,WAAW,sCAAwC,0BAE/C;IAEJ,+BAA+B;IAC/B,UAAU,uCAAyC,QAAQ,GAAG,GAAG;IACjE,OAAO,oDAAyB;IAEhC,iCAAiC;IACjC,YAAY;QACV,kBAAkB;QAClB,+CAA+C;QAC/C,GAAI,oDAAyB,gBAAgB;YAC3C,SAAS;QACX,CAAC;IACH;AACF;AAEO,MAAM,KAAK,CAAA,GAAA,kWAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 394, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/production-env.ts"],"sourcesContent":["/**\n * Production Environment Variable Override\n * \n * This module ensures that production environment variables take precedence\n * over development variables, especially when dealing with localhost URLs\n * that might be loaded from symlinked .env.local files.\n */\n\n// Production URL mappings - these should always be used in production\nconst PRODUCTION_URL_OVERRIDES = {\n  'http://localhost:3000': 'https://afarsemon.com',\n  'localhost:3000': 'https://afarsemon.com',\n  'localhost': 'https://afarsemon.com'\n} as const;\n\n/**\n * Resolves environment variables with production-first priority\n * Filters out localhost URLs when in production environment\n */\nexport function getProductionSafeUrl(envVar: string | undefined, fallback: string): string {\n  if (!envVar) {\n    return fallback;\n  }\n\n  // In production, replace any localhost URLs with production URLs\n  if (process.env.NODE_ENV === 'production') {\n    // Check if the URL contains localhost and replace it\n    for (const [localUrl, prodUrl] of Object.entries(PRODUCTION_URL_OVERRIDES)) {\n      if (envVar.includes(localUrl)) {\n        console.warn(`[Prod URL Override] Replacing ${envVar} with ${prodUrl}`);\n        return prodUrl;\n      }\n    }\n  }\n\n  return envVar;\n}\n\n/**\n * Gets production-safe environment variables with proper fallbacks\n */\nexport function getProductionEnvVars() {\n  const isProduction = process.env.NODE_ENV === 'production';\n  \n  // Force production URLs when in production environment\n  const betterAuthUrl = isProduction \n    ? getProductionSafeUrl(process.env.BETTER_AUTH_URL, 'https://afarsemon.com')\n    : process.env.BETTER_AUTH_URL || 'http://localhost:3000';\n    \n  const publicBetterAuthUrl = isProduction \n    ? getProductionSafeUrl(process.env.NEXT_PUBLIC_BETTER_AUTH_URL, 'https://afarsemon.com')\n    : process.env.NEXT_PUBLIC_BETTER_AUTH_URL || 'http://localhost:3000';\n    \n  const publicAppUrl = isProduction \n    ? getProductionSafeUrl(process.env.NEXT_PUBLIC_APP_URL, 'https://afarsemon.com')\n    : process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n\n  return {\n    BETTER_AUTH_URL: betterAuthUrl,\n    NEXT_PUBLIC_BETTER_AUTH_URL: publicBetterAuthUrl,\n    NEXT_PUBLIC_APP_URL: publicAppUrl,\n    isProduction,\n    originalVars: {\n      BETTER_AUTH_URL: process.env.BETTER_AUTH_URL,\n      NEXT_PUBLIC_BETTER_AUTH_URL: process.env.NEXT_PUBLIC_BETTER_AUTH_URL,\n      NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n    }\n  };\n}\n\n/**\n * Production-aware base URL resolver\n */\nexport function resolveProductionBaseURL(): string {\n  const prodVars = getProductionEnvVars();\n  \n  if (prodVars.isProduction) {\n    // In production, prioritize production URLs\n    return prodVars.BETTER_AUTH_URL || \n           prodVars.NEXT_PUBLIC_BETTER_AUTH_URL || \n           prodVars.NEXT_PUBLIC_APP_URL || \n           'https://afarsemon.com';\n  }\n  \n  // In development, allow localhost\n  return prodVars.BETTER_AUTH_URL || \n         prodVars.NEXT_PUBLIC_BETTER_AUTH_URL || \n         prodVars.NEXT_PUBLIC_APP_URL || \n         'http://localhost:3000';\n}"],"names":[],"mappings":"AAAA;;;;;;CAMC,GAED,sEAAsE;;;;;;AACtE,MAAM,2BAA2B;IAC/B,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;AACf;AAMO,SAAS,qBAAqB,MAA0B,EAAE,QAAgB;IAC/E,IAAI,CAAC,QAAQ;QACX,OAAO;IACT;IAEA,iEAAiE;IACjE;;IAUA,OAAO;AACT;AAKO,SAAS;IACd,MAAM,eAAe,oDAAyB;IAE9C,uDAAuD;IACvD,MAAM,gBAAgB,sCAClB,0BACA,QAAQ,GAAG,CAAC,eAAe,IAAI;IAEnC,MAAM,sBAAsB,sCACxB,0BACA,6DAA2C;IAE/C,MAAM,eAAe,sCACjB,0BACA,6DAAmC;IAEvC,OAAO;QACL,iBAAiB;QACjB,6BAA6B;QAC7B,qBAAqB;QACrB;QACA,cAAc;YACZ,iBAAiB,QAAQ,GAAG,CAAC,eAAe;YAC5C,2BAA2B;YAC3B,mBAAmB;QACrB;IACF;AACF;AAKO,SAAS;IACd,MAAM,WAAW;IAEjB,IAAI,SAAS,YAAY,EAAE;QACzB,4CAA4C;QAC5C,OAAO,SAAS,eAAe,IACxB,SAAS,2BAA2B,IACpC,SAAS,mBAAmB,IAC5B;IACT;IAEA,kCAAkC;IAClC,OAAO,SAAS,eAAe,IACxB,SAAS,2BAA2B,IACpC,SAAS,mBAAmB,IAC5B;AACT","debugId":null}},
    {"offset": {"line": 451, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/lib/auth.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\"\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\"\nimport { nextCookies } from \"better-auth/next-js\"\nimport { db } from \"./db\"\nimport * as schema from \"./schema\"\nimport { getServerEnv } from \"@afarsemon/env\"\nimport { resolveProductionBaseURL, getProductionEnvVars } from \"./production-env\"\n\nconst serverEnv = getServerEnv();\nconst prodVars = getProductionEnvVars();\n\n// Use production-aware URL resolution\nconst resolvedBaseURL = resolveProductionBaseURL();\n\n// Add debug logging for configuration\nconsole.log('[Auth Config] Initializing Better Auth with:', {\n  baseURL: resolvedBaseURL,\n  hasGoogleClientId: !!serverEnv.GOOGLE_CLIENT_ID,\n  hasGoogleClientSecret: !!serverEnv.GOOGLE_CLIENT_SECRET,\n  hasBetterAuthSecret: !!serverEnv.BETTER_AUTH_SECRET,\n  hasPostgresUrl: !!serverEnv.POSTGRES_URL,\n  environment: process.env.NODE_ENV,\n  // Show both original and production-safe URLs\n  originalUrls: {\n    betterAuthUrl: serverEnv.BETTER_AUTH_URL,\n    publicBetterAuthUrl: serverEnv.NEXT_PUBLIC_BETTER_AUTH_URL,\n    publicAppUrl: serverEnv.NEXT_PUBLIC_APP_URL,\n  },\n  productionSafeUrls: {\n    betterAuthUrl: prodVars.BETTER_AUTH_URL,\n    publicBetterAuthUrl: prodVars.NEXT_PUBLIC_BETTER_AUTH_URL,\n    publicAppUrl: prodVars.NEXT_PUBLIC_APP_URL,\n  },\n  isProduction: prodVars.isProduction,\n  // Additional debugging\n  vercelEnv: process.env.VERCEL_ENV,\n  vercelUrl: process.env.VERCEL_URL,\n});\n\n// Warn if production is using localhost URLs\nif (process.env.NODE_ENV === 'production' && resolvedBaseURL.includes('localhost')) {\n  console.warn('‚ö†Ô∏è [CRITICAL] Production server auth is using localhost URL!');\n  console.warn('This will cause authentication failures. Check your production environment variables.');\n  console.warn('Expected production URL format: https://afarsemon.com');\n}\n\nexport const auth = betterAuth({\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n    schema: {\n      ...schema,\n    },\n  }),\n  baseURL: resolvedBaseURL,\n  secret: serverEnv.BETTER_AUTH_SECRET, // Explicitly set the secret\n  socialProviders: {\n    google: {\n      clientId: serverEnv.GOOGLE_CLIENT_ID,\n      clientSecret: serverEnv.GOOGLE_CLIENT_SECRET,\n      // Remove explicit redirectURI to let Better Auth generate it automatically\n      // This ensures it matches the baseURL + /api/auth/callback/google\n    },\n  },\n  emailAndPassword: {\n    enabled: true,\n    requireEmailVerification: false, // Disabled for development - no email service configured\n    minPasswordLength: 6, // Reduced for easier testing\n    maxPasswordLength: 128,\n    autoSignIn: true, // Sign in user automatically after successful registration\n    sendResetPassword: async ({ user, url }) => {\n      // TODO: Implement email sending for password reset\n      console.log(`Password reset requested for ${user.email}. Reset URL: ${url}`);\n      // In production, replace with actual email service\n    },\n    resetPasswordTokenExpiresIn: 3600, // 1 hour\n  },\n  emailVerification: {\n    sendVerificationEmail: async ({ user, url }) => {\n      // TODO: Implement email sending for verification\n      console.log(`Email verification requested for ${user.email}. Verification URL: ${url}`);\n      // In production, replace with actual email service like Resend, SendGrid, etc.\n    },\n    sendOnSignUp: true, // Automatically send verification email on sign up\n    autoSignInAfterVerification: true, // Sign in user after successful verification\n    expiresIn: 3600, // 1 hour\n  },\n  advanced: {\n    // Security configurations\n    useSecureCookies: process.env.NODE_ENV === \"production\",\n    disableCSRFCheck: false, // Keep CSRF protection enabled\n    cookiePrefix: process.env.NODE_ENV === \"production\" ? \"__Host-\" : \"\", // Use __Host- prefix only in production\n    defaultCookieAttributes: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"lax\", // CSRF protection\n    },\n    // IP tracking for security\n    ipAddress: {\n      disableIpTracking: false,\n    },\n  },\n  session: {\n    expiresIn: 60 * 60 * 24 * 7, // 7 days\n    updateAge: 60 * 60 * 24, // Update session every 24 hours\n    cookieCache: {\n      enabled: true,\n      maxAge: 60 * 5 // Cache for 5 minutes\n    }\n  },\n  trustedOrigins: [\n    resolvedBaseURL,\n    prodVars.NEXT_PUBLIC_APP_URL,\n    prodVars.BETTER_AUTH_URL,\n    prodVars.NEXT_PUBLIC_BETTER_AUTH_URL,\n    \"https://afarsemon.com\",\n    ...(prodVars.isProduction ? [] : [\"http://localhost:3000\"]) // Only allow localhost in development\n  ].filter((url): url is string => Boolean(url))\n   .filter((url, index, self) => self.indexOf(url) === index), // Remove duplicates\n  plugins: [\n    nextCookies(), // Must be the last plugin for Next.js cookie handling\n  ],\n})"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 587, "column": 0}, "map": {"version":3,"sources":["file:///home/gi/Documents/1_Projects/afarsemon/afarsemon/apps/www/src/app/api/auth/%5B...all%5D/route.ts"],"sourcesContent":["import { auth } from \"@/lib/auth\"\nimport { toNextJsHandler } from \"better-auth/next-js\"\nimport { NextRequest, NextResponse } from \"next/server\"\n\n// Create the handlers with error handling wrapper\nconst handlers = toNextJsHandler(auth.handler)\n\n// Enhanced GET handler with error logging\nexport async function GET(request: NextRequest) {\n  try {\n    // Log the request details in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[Auth GET] Request URL:', request.url)\n      console.log('[Auth GET] Request headers:', Object.fromEntries(request.headers.entries()))\n    }\n    \n    // Call the original handler\n    const response = await handlers.GET(request)\n    \n    // Log response status in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[Auth GET] Response status:', response.status)\n    }\n    \n    return response\n  } catch (error) {\n    // Enhanced error logging\n    console.error('[Auth GET] Error occurred:', error)\n    console.error('[Auth GET] Error stack:', error instanceof Error ? error.stack : 'No stack trace')\n    console.error('[Auth GET] Request URL that failed:', request.url)\n    console.error('[Auth GET] Request method:', request.method)\n    \n    // Return a proper error response\n    return NextResponse.json(\n      { \n        error: 'Authentication request failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        path: request.url\n      },\n      { \n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      }\n    )\n  }\n}\n\n// Enhanced POST handler with error logging\nexport async function POST(request: NextRequest) {\n  try {\n    // Log the request details in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[Auth POST] Request URL:', request.url)\n      console.log('[Auth POST] Request headers:', Object.fromEntries(request.headers.entries()))\n      \n      // Try to log the body (be careful with sensitive data)\n      try {\n        const clonedRequest = request.clone()\n        const body = await clonedRequest.text()\n        if (body) {\n          // Mask sensitive fields\n          const parsedBody = JSON.parse(body)\n          if (parsedBody.password) parsedBody.password = '[MASKED]'\n          if (parsedBody.token) parsedBody.token = '[MASKED]'\n          console.log('[Auth POST] Request body:', parsedBody)\n        }\n      } catch {\n        // Body parsing failed, ignore\n      }\n    }\n    \n    // Call the original handler\n    const response = await handlers.POST(request)\n    \n    // Log response status in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[Auth POST] Response status:', response.status)\n    }\n    \n    return response\n  } catch (error) {\n    // Enhanced error logging\n    console.error('[Auth POST] Error occurred:', error)\n    console.error('[Auth POST] Error stack:', error instanceof Error ? error.stack : 'No stack trace')\n    console.error('[Auth POST] Request URL that failed:', request.url)\n    console.error('[Auth POST] Request method:', request.method)\n    \n    // Return a proper error response\n    return NextResponse.json(\n      { \n        error: 'Authentication request failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        path: request.url\n      },\n      { \n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      }\n    )\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,kDAAkD;AAClD,MAAM,WAAW,CAAA,GAAA,+SAAA,CAAA,kBAAe,AAAD,EAAE,mIAAA,CAAA,OAAI,CAAC,OAAO;AAGtC,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,yCAAyC;QACzC,wCAA4C;YAC1C,QAAQ,GAAG,CAAC,2BAA2B,QAAQ,GAAG;YAClD,QAAQ,GAAG,CAAC,+BAA+B,OAAO,WAAW,CAAC,QAAQ,OAAO,CAAC,OAAO;QACvF;QAEA,4BAA4B;QAC5B,MAAM,WAAW,MAAM,SAAS,GAAG,CAAC;QAEpC,qCAAqC;QACrC,wCAA4C;YAC1C,QAAQ,GAAG,CAAC,+BAA+B,SAAS,MAAM;QAC5D;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,yBAAyB;QACzB,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,QAAQ,KAAK,CAAC,2BAA2B,iBAAiB,QAAQ,MAAM,KAAK,GAAG;QAChF,QAAQ,KAAK,CAAC,uCAAuC,QAAQ,GAAG;QAChE,QAAQ,KAAK,CAAC,8BAA8B,QAAQ,MAAM;QAE1D,iCAAiC;QACjC,OAAO,+UAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAClD,WAAW,IAAI,OAAO,WAAW;YACjC,MAAM,QAAQ,GAAG;QACnB,GACA;YACE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;IAEJ;AACF;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,yCAAyC;QACzC,wCAA4C;YAC1C,QAAQ,GAAG,CAAC,4BAA4B,QAAQ,GAAG;YACnD,QAAQ,GAAG,CAAC,gCAAgC,OAAO,WAAW,CAAC,QAAQ,OAAO,CAAC,OAAO;YAEtF,uDAAuD;YACvD,IAAI;gBACF,MAAM,gBAAgB,QAAQ,KAAK;gBACnC,MAAM,OAAO,MAAM,cAAc,IAAI;gBACrC,IAAI,MAAM;oBACR,wBAAwB;oBACxB,MAAM,aAAa,KAAK,KAAK,CAAC;oBAC9B,IAAI,WAAW,QAAQ,EAAE,WAAW,QAAQ,GAAG;oBAC/C,IAAI,WAAW,KAAK,EAAE,WAAW,KAAK,GAAG;oBACzC,QAAQ,GAAG,CAAC,6BAA6B;gBAC3C;YACF,EAAE,OAAM;YACN,8BAA8B;YAChC;QACF;QAEA,4BAA4B;QAC5B,MAAM,WAAW,MAAM,SAAS,IAAI,CAAC;QAErC,qCAAqC;QACrC,wCAA4C;YAC1C,QAAQ,GAAG,CAAC,gCAAgC,SAAS,MAAM;QAC7D;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,yBAAyB;QACzB,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,QAAQ,KAAK,CAAC,4BAA4B,iBAAiB,QAAQ,MAAM,KAAK,GAAG;QACjF,QAAQ,KAAK,CAAC,wCAAwC,QAAQ,GAAG;QACjE,QAAQ,KAAK,CAAC,+BAA+B,QAAQ,MAAM;QAE3D,iCAAiC;QACjC,OAAO,+UAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAClD,WAAW,IAAI,OAAO,WAAW;YACjC,MAAM,QAAQ,GAAG;QACnB,GACA;YACE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;IAEJ;AACF","debugId":null}}]
}